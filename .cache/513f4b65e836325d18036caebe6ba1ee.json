{"dependencies":[{"name":"../util.js","loc":{"line":2,"column":16}},{"name":"../dom.js","loc":{"line":3,"column":18}},{"name":"../Regular.js","loc":{"line":4,"column":22}}],"generated":{"js":"// Regular\nvar _ = require(\"../util.js\");\nvar dom = require(\"../dom.js\");\nvar Regular = require(\"../Regular.js\");\n\nvar modelHandlers = {\n  \"text\": initText,\n  \"select\": initSelect,\n  \"checkbox\": initCheckBox,\n  \"radio\": initRadio\n}\n\n\n// @TODO\n\n\n// two-way binding with r-model\n// works on input, textarea, checkbox, radio, select\n\nRegular.directive(\"r-model\", function(elem, value){\n  var tag = elem.tagName.toLowerCase();\n  var sign = tag;\n  if(sign === \"input\") sign = elem.type || \"text\";\n  else if(sign === \"textarea\") sign = \"text\";\n  if(typeof value === \"string\") value = this.$expression(value);\n\n  if( modelHandlers[sign] ) return modelHandlers[sign].call(this, elem, value);\n  else if(tag === \"input\"){\n    return modelHandlers.text.call(this, elem, value);\n  }\n});\n\n\n\n// binding <select>\n\nfunction initSelect( elem, parsed){\n  var self = this;\n  var wc =this.$watch(parsed, function(newValue){\n    var children = _.slice(elem.getElementsByTagName('option'))\n    children.forEach(function(node, index){\n      if(node.value == newValue){\n        elem.selectedIndex = index;\n      }\n    })\n  });\n\n  function handler(){\n    parsed.set(self, this.value);\n    wc.last = this.value;\n    self.$update();\n  }\n\n  dom.on(elem, \"change\", handler);\n  \n  if(parsed.get(self) === undefined && elem.value){\n     parsed.set(self, elem.value);\n  }\n  return function destroy(){\n    dom.off(elem, \"change\", handler);\n  }\n}\n\n// input,textarea binding\n\nfunction initText(elem, parsed){\n  var self = this;\n  var wc = this.$watch(parsed, function(newValue){\n    if(elem.value !== newValue) elem.value = newValue == null? \"\": \"\" + newValue;\n  });\n\n  // @TODO to fixed event\n  var handler = function (ev){\n    var that = this;\n    if(ev.type==='cut' || ev.type==='paste'){\n      _.nextTick(function(){\n        var value = that.value\n        parsed.set(self, value);\n        wc.last = value;\n        self.$update();\n      })\n    }else{\n        var value = that.value\n        parsed.set(self, value);\n        wc.last = value;\n        self.$update();\n    }\n  };\n\n  if(dom.msie !== 9 && \"oninput\" in dom.tNode ){\n    elem.addEventListener(\"input\", handler );\n  }else{\n    dom.on(elem, \"paste\", handler)\n    dom.on(elem, \"keyup\", handler)\n    dom.on(elem, \"cut\", handler)\n    dom.on(elem, \"change\", handler)\n  }\n  if(parsed.get(self) === undefined && elem.value){\n     parsed.set(self, elem.value);\n  }\n  return function (){\n    if(dom.msie !== 9 && \"oninput\" in dom.tNode ){\n      elem.removeEventListener(\"input\", handler );\n    }else{\n      dom.off(elem, \"paste\", handler)\n      dom.off(elem, \"keyup\", handler)\n      dom.off(elem, \"cut\", handler)\n      dom.off(elem, \"change\", handler)\n    }\n  }\n}\n\n\n// input:checkbox  binding\n\nfunction initCheckBox(elem, parsed){\n  var self = this;\n  var watcher = this.$watch(parsed, function(newValue){\n    dom.attr(elem, 'checked', !!newValue);\n  });\n\n  var handler = function handler(){\n    var value = this.checked;\n    parsed.set(self, value);\n    watcher.last = value;\n    self.$update();\n  }\n  if(parsed.set) dom.on(elem, \"change\", handler)\n\n  if(parsed.get(self) === undefined){\n    parsed.set(self, !!elem.checked);\n  }\n\n  return function destroy(){\n    if(parsed.set) dom.off(elem, \"change\", handler)\n  }\n}\n\n\n// input:radio binding\n\nfunction initRadio(elem, parsed){\n  var self = this;\n  var wc = this.$watch(parsed, function( newValue ){\n    if(newValue == elem.value) elem.checked = true;\n    else elem.checked = false;\n  });\n\n\n  var handler = function handler(){\n    var value = this.value;\n    parsed.set(self, value);\n    self.$update();\n  }\n  if(parsed.set) dom.on(elem, \"change\", handler)\n  // beacuse only after compile(init), the dom structrue is exsit. \n  if(parsed.get(self) === undefined){\n    if(elem.checked) {\n      parsed.set(self, elem.value);\n    }\n  }\n\n  return function destroy(){\n    if(parsed.set) dom.off(elem, \"change\", handler)\n  }\n}\n"},"hash":"3d1aa51f42c31b23c9bf0523c854f442"}