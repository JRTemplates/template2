{"dependencies":[{"name":"../util","loc":{"line":1,"column":16}},{"name":"../config","loc":{"line":2,"column":21}},{"name":"../helper/parse","loc":{"line":3,"column":20}},{"name":"../parser/node","loc":{"line":4,"column":19}}],"generated":{"js":"var _ = require('../util');\nvar config = require('../config');\nvar parse = require('../helper/parse');\nvar node = require('../parser/node');\n\n\nfunction initDefinition(context, definition, beforeConfig){\n\n  var eventConfig, hasInstanceComputed = !!definition.computed, template;\n  var usePrototyeString = typeof context.template === 'string' && !definition.template;\n\n // template is a string (len < 16). we will find it container first\n\n  definition.data = definition.data || {};\n  definition.computed = definition.computed || {};\n  if( context.data ) _.extend( definition.data, context.data );\n  if( context.computed ) _.extend( definition.computed, context.computed );\n\n  var listeners = context._eventListeners || [];\n  var normListener;\n  // hanle initialized event binding\n  if( definition.events){\n    normListener = _.normListener(definition.events);\n    if(normListener.length){\n      listeners = listeners.concat(normListener)\n    }\n    delete definition.events;\n  }\n\n\n  definition.data = definition.data || {};\n  definition.computed = definition.computed || {};\n  if(context.data) _.extend(definition.data, context.data);\n  if(context.computed) _.extend(definition.computed, context.computed);\n\n  var usePrototyeString = typeof context.template === 'string' && !definition.template;\n\n  _.extend(context, definition, true);\n\n\n\n  if(listeners && listeners.length){\n    listeners.forEach(function( item ){\n      context.$on(item.type, item.listener)\n    })\n  }\n\n\n  // we need add some logic at client.\n  beforeConfig && beforeConfig();\n\n  // only have instance computed, we need prepare the property\n  if( hasInstanceComputed ) context.computed = handleComputed(context.computed);\n\n  context.$emit( \"$config\", context.data );\n  context.config && context.config( context.data );\n  context.$emit( \"$afterConfig\", context.data );\n\n  template = context.template;\n\n \n  if(typeof template === 'string') {\n    template = parse.parse(template);\n    if(usePrototyeString) {\n    // avoid multiply compile\n      context.constructor.prototype.template = template;\n    }else{\n      delete context.template;\n    }\n  }\n  return template;\n}\n\nvar handleComputed = (function(){\n  // wrap the computed getter;\n  function wrapGet(get){\n    return function(context){\n      return get.call(context, context.data );\n    }\n  }\n  // wrap the computed setter;\n  function wrapSet(set){\n    return function(context, value){\n      set.call( context, value, context.data );\n      return value;\n    }\n  }\n\n  return function( computed ){\n    if(!computed) return;\n    var parsedComputed = {}, handle, pair, type;\n    for(var i in computed){\n      handle = computed[i]\n      type = typeof handle;\n\n      if(handle.type === 'expression'){\n        parsedComputed[i] = handle;\n        continue;\n      }\n      if( type === \"string\" ){\n        parsedComputed[i] = parse.expression(handle)\n      }else{\n        pair = parsedComputed[i] = {type: 'expression'};\n        if(type === \"function\" ){\n          pair.get = wrapGet(handle);\n        }else{\n          if(handle.get) pair.get = wrapGet(handle.get);\n          if(handle.set) pair.set = wrapSet(handle.set);\n        }\n      } \n    }\n    return parsedComputed;\n  }\n})();\n\n\nfunction prepareAttr ( ast ,directive ){\n  if(ast.parsed ) return ast;\n  var value = ast.value;\n  var name=  ast.name, body, constant;\n  if(typeof value === 'string' && ~value.indexOf(config.BEGIN) && ~value.indexOf(config.END) ){\n    if( !directive || !directive.nps ) {\n      var parsed = parse.parse(value, { mode: 2 });\n      if(parsed.length === 1 && parsed[0].type === 'expression'){ \n        body = parsed[0];\n      } else{\n        constant = true;\n        body = [];\n        parsed.forEach(function(item){\n          if(!item.constant) constant=false;\n          // silent the mutiple inteplation\n            body.push(item.body || \"'\" + item.text.replace(/'/g, \"\\\\'\") + \"'\");        \n        });\n        body = node.expression(\"[\" + body.join(\",\") + \"].join('')\", null, constant);\n      }\n      ast.value = body;\n    }\n  }\n  ast.parsed = true;\n  return ast;\n}\n\nmodule.exports = {\n  // share logic between server and client\n  initDefinition: initDefinition,\n  handleComputed: handleComputed,\n  prepareAttr: prepareAttr\n}"},"hash":"107cbef211db484f1e3ad9ef7519abb6"}