{"dependencies":[{"name":"./browser.js","loc":{"line":6,"column":22}},{"name":"./util.js","loc":{"line":7,"column":16}}],"generated":{"js":"\n// MIT\n// Thx Backbone.js 1.1.2  and https://github.com/cowboy/jquery-hashchange/blob/master/jquery.ba-hashchange.js\n// for iframe patches in old ie.\n\nvar browser = require(\"./browser.js\");\nvar _ = require(\"./util.js\");\n\n\n// the mode const\nvar QUIRK = 3,\n  HASH = 1,\n  HISTORY = 2;\n\n// extract History for test\n// resolve the conficlt with the Native History\nfunction History(options){\n  options = options || {};\n\n  // Trick from backbone.history for anchor-faked testcase\n  this.location = options.location || browser.location;\n\n  // mode config, you can pass absolute mode (just for test);\n  this.html5 = options.html5;\n  this.mode = options.html5 && browser.history ? HISTORY: HASH;\n  if( !browser.hash ) this.mode = QUIRK;\n  if(options.mode) this.mode = options.mode;\n\n  // hash prefix , used for hash or quirk mode\n  this.prefix = \"#\" + (options.prefix || \"\") ;\n  this.rPrefix = new RegExp(this.prefix + '(.*)$');\n  this.interval = options.interval || 66;\n\n  // the root regexp for remove the root for the path. used in History mode\n  this.root = options.root ||  \"/\" ;\n  this.rRoot = new RegExp(\"^\" +  this.root);\n\n\n  this.autolink = options.autolink!==false;\n  this.autofix = options.autofix!==false;\n\n  this.curPath = undefined;\n}\n\n_.extend( _.emitable(History), {\n  // check the\n  start: function(callback){\n    var path = this.getPath();\n    this._checkPath = _.bind(this.checkPath, this);\n\n    if( this.isStart ) return;\n    this.isStart = true;\n\n    if(this.mode === QUIRK){\n      this._fixHashProbelm(path);\n    }\n\n    switch ( this.mode ){\n      case HASH:\n        browser.on(window, \"hashchange\", this._checkPath);\n        break;\n      case HISTORY:\n        browser.on(window, \"popstate\", this._checkPath);\n        break;\n      case QUIRK:\n        this._checkLoop();\n    }\n    // event delegate\n    this.autolink && this._autolink();\n    this.autofix && this._fixInitState();\n\n    this.curPath = path;\n\n    this.emit(\"change\", path, { firstTime: true});\n  },\n\n  // the history teardown\n  stop: function(){\n\n    browser.off(window, 'hashchange', this._checkPath);\n    browser.off(window, 'popstate', this._checkPath);\n    clearTimeout(this.tid);\n    this.isStart = false;\n    this._checkPath = null;\n  },\n\n  // get the path modify\n  checkPath: function(/*ev*/){\n\n    var path = this.getPath(), curPath = this.curPath;\n\n    //for oldIE hash history issue\n    if(path === curPath && this.iframe){\n      path = this.getPath(this.iframe.location);\n    }\n\n    if( path !== curPath ) {\n      this.iframe && this.nav(path, {silent: true});\n      this.curPath = path;\n      this.emit('change', path);\n    }\n  },\n\n  // get the current path\n  getPath: function(location){\n    location = location || this.location;\n    var tmp;\n\n    if( this.mode !== HISTORY ){\n      tmp = location.href.match(this.rPrefix);\n      return _.cleanPath(tmp && tmp[1]? tmp[1]: \"\");\n\n    }else{\n      return _.cleanPath(( location.pathname + location.search || \"\" ).replace( this.rRoot, \"/\" ));\n    }\n  },\n\n  nav: function(to, options ){\n\n    var iframe = this.iframe;\n\n    options = options || {};\n\n    to = _.cleanPath(to);\n\n    if(this.curPath == to) return;\n\n    // pushState wont trigger the checkPath\n    // but hashchange will\n    // so we need set curPath before to forbit the CheckPath\n    this.curPath = to;\n\n    // 3 or 1 is matched\n    if( this.mode !== HISTORY ){\n      this._setHash(this.location, to, options.replace);\n      if( iframe && this.getPath(iframe.location) !== to ){\n        if(!options.replace) iframe.document.open().close();\n        this._setHash(this.iframe.location, to, options.replace);\n      }\n    }else{\n      this._changeState(this.location, options.title||\"\", _.cleanPath( this.root + to ), options.replace )\n    }\n\n    if( !options.silent ) this.emit('change', to);\n  },\n  _autolink: function(){\n    if(this.mode!==HISTORY) return;\n    // only in html5 mode, the autolink is works\n    // if(this.mode !== 2) return;\n    var self = this;\n    browser.on( document.body, \"click\", function(ev){\n\n      var target = ev.target || ev.srcElement;\n      if( target.tagName.toLowerCase() !== \"a\" ) return;\n      var tmp = browser.isSameDomain(target.href)&&(browser.getHref(target)||\"\").match(self.rPrefix);\n\n      var hash = tmp && tmp[1]? tmp[1]: \"\";\n\n      if(!hash) return;\n\n      ev.preventDefault && ev.preventDefault();\n      self.nav( hash );\n      return (ev.returnValue = false);\n    } );\n  },\n  _setHash: function(location, path, replace){\n    var href = location.href.replace(/(javascript:|#).*$/, '');\n    if (replace){\n      location.replace(href + this.prefix+ path);\n    }\n    else location.hash = this.prefix+ path;\n  },\n  // for browser that not support onhashchange\n  _checkLoop: function(){\n    var self = this;\n    this.tid = setTimeout( function(){\n      self._checkPath();\n      self._checkLoop();\n    }, this.interval );\n  },\n  // if we use real url in hash env( browser no history popstate support)\n  // or we use hash in html5supoort mode (when paste url in other url)\n  // then , history should repara it\n  _fixInitState: function(){\n    var pathname = _.cleanPath(this.location.pathname), hash, hashInPathName;\n\n    // dont support history popstate but config the html5 mode\n    if( this.mode !== HISTORY && this.html5){\n\n      hashInPathName = pathname.replace(this.rRoot, \"\");\n      if(hashInPathName) this.location.replace(this.root + this.prefix + _.cleanPath(hashInPathName));\n\n    }else if( this.mode === HISTORY /* && pathname === this.root*/){\n\n      hash = this.location.hash.replace(this.prefix, \"\");\n      if(hash) this._changeState( this.location, document.title, _.cleanPath(this.root + hash));\n    }\n  },\n  // ONLY for test, forbid browser to update \n  _changeState: function(location, title, path, replace){\n    var history = location.history || window.history;\n    return history[replace? 'replaceState': 'pushState']({}, title , path)\n  },\n  // Thanks for backbone.history and https://github.com/cowboy/jquery-hashchange/blob/master/jquery.ba-hashchange.js\n  // for helping stateman fixing the oldie hash history issues when with iframe hack\n  _fixHashProbelm: function(path){\n    var iframe = document.createElement('iframe'), body = document.body;\n    iframe.src = 'javascript:;';\n    iframe.style.display = 'none';\n    iframe.tabIndex = -1;\n    iframe.title = \"\";\n    this.iframe = body.insertBefore(iframe, body.firstChild).contentWindow;\n    this.iframe.document.open().close();\n    this.iframe.location.hash = '#' + path;\n  }\n\n});\n\nmodule.exports = History;\n"},"hash":"d742216c8284b1ab8da7f21b856a73c5"}