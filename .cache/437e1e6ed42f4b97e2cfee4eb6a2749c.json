{"dependencies":[{"name":"../util","loc":{"line":2,"column":16}},{"name":"../dom","loc":{"line":3,"column":18}},{"name":"../helper/animate","loc":{"line":4,"column":22}},{"name":"../render/client","loc":{"line":5,"column":22}},{"name":"../const","loc":{"line":6,"column":21}},{"name":"./event.js","loc":{"line":15,"column":8}},{"name":"./form.js","loc":{"line":16,"column":8}}],"generated":{"js":"// Regular\nvar _ = require(\"../util\");\nvar dom = require(\"../dom\");\nvar animate = require(\"../helper/animate\");\nvar Regular = require(\"../render/client\");\nvar consts = require(\"../const\");\nvar namespaces = consts.NAMESPACE;\nvar OPTIONS = consts.OPTIONS\nvar STABLE = OPTIONS.STABLE;\nvar DEEP_STABLE = {deep: true, stable: true};\n\n\n\n\nrequire(\"./event.js\");\nrequire(\"./form.js\");\n\n\nmodule.exports = {\n// **warn**: class inteplation will override this directive \n  'r-class': function(elem, value){\n\n    if(typeof value=== 'string'){\n      value = _.fixObjStr(value)\n    }\n    var isNotHtml = elem.namespaceURI && elem.namespaceURI !== namespaces.html ;\n    this.$watch(value, function(nvalue){\n      var className = isNotHtml? elem.getAttribute('class'): elem.className;\n      className = ' '+ (className||'').replace(/\\s+/g, ' ') +' ';\n      for(var i in nvalue) if(nvalue.hasOwnProperty(i)){\n        className = className.replace(' ' + i + ' ',' ');\n        if(nvalue[i] === true){\n          className += i+' ';\n        }\n      }\n      className = className.trim();\n      if(isNotHtml){\n        dom.attr(elem, 'class', className)\n      }else{\n        elem.className = className\n      }\n    }, DEEP_STABLE);\n  },\n  // **warn**: style inteplation will override this directive \n  'r-style': function(elem, value){\n    if(typeof value=== 'string'){\n      value = _.fixObjStr(value)\n    }\n    this.$watch(value, function(nvalue){\n      for(var i in nvalue) if(nvalue.hasOwnProperty(i)){\n        dom.css(elem, i, nvalue[i]);\n      }\n    },DEEP_STABLE);\n  },\n  // when expression is evaluate to true, the elem will add display:none\n  // Example: <div r-hide={{items.length > 0}}></div>\n  'r-hide': {\n    link:function(elem, value){\n      var preBool = null, compelete;\n      if( _.isExpr(value) || typeof value === \"string\"){\n        this.$watch(value, function(nvalue){\n          var bool = !!nvalue;\n          if(bool === preBool) return; \n          preBool = bool;\n          if(bool){\n            if(elem.onleave){\n              compelete = elem.onleave(function(){\n                elem.style.display = \"none\"\n                compelete = null;\n              })\n            }else{\n              elem.style.display = \"none\"\n            }\n            \n          }else{\n            if(compelete) compelete();\n            elem.style.display = \"\";\n            if(elem.onenter){\n              elem.onenter();\n            }\n          }\n        }, STABLE);\n      }else if(!!value){\n        elem.style.display = \"none\";\n      }\n    },\n    ssr: function(value){\n      return value? 'style=\"display:none\"': ''\n    }\n  },\n  'r-html': {\n    ssr: function(value, tag){\n      tag.body = value;\n      return \"\";\n    },\n    link: function(elem, value){\n      this.$watch(value, function(nvalue){\n        nvalue = nvalue || \"\";\n        dom.html(elem, nvalue)\n      }, {force: true, stable: true});\n    }\n  },\n  'ref': {\n    accept: consts.COMPONENT_TYPE + consts.ELEMENT_TYPE,\n    link: function( elem, value ){\n      var refs = this.$refs || (this.$refs = {});\n      var cval;\n      if(_.isExpr(value)){\n        this.$watch(value, function(nval, oval){\n          cval = nval;\n          if(refs[oval] === elem) refs[oval] = null;\n          if(cval) refs[cval] = elem;\n        }, STABLE)\n      }else{\n        refs[cval = value] = elem;\n      }\n      return function(){\n        refs[cval] = null;\n      }\n    }\n  }\n}\n\nRegular.directive(module.exports);\n\n\n\n\n\n\n\n\n\n\n"},"hash":"d449d02a95ce9754ed50d5733d8c44cd"}