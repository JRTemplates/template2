{"dependencies":[],"generated":{"js":"// shim for es5\nvar slice = [].slice;\nvar tstr = ({}).toString;\n\nfunction extend(o1, o2 ){\n  for(var i in o2) if( o1[i] === undefined){\n    o1[i] = o2[i]\n  }\n  return o2;\n}\n\n\nmodule.exports = function(){\n  // String proto ;\n  extend(String.prototype, {\n    trim: function(){\n      return this.replace(/^\\s+|\\s+$/g, '');\n    }\n  });\n\n\n  // Array proto;\n  extend(Array.prototype, {\n    indexOf: function(obj, from){\n      from = from || 0;\n      for (var i = from, len = this.length; i < len; i++) {\n        if (this[i] === obj) return i;\n      }\n      return -1;\n    },\n    // polyfill from MDN \n    // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n    forEach: function(callback, ctx){\n      var k = 0;\n\n      // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n      var O = Object(this);\n\n      var len = O.length >>> 0; \n\n      if ( typeof callback !== \"function\" ) {\n        throw new TypeError( callback + \" is not a function\" );\n      }\n\n      // 7. Repeat, while k < len\n      while( k < len ) {\n\n        var kValue;\n\n        if ( k in O ) {\n\n          kValue = O[ k ];\n\n          callback.call( ctx, kValue, k, O );\n        }\n        k++;\n      }\n    },\n    // @deprecated\n    //  will be removed at 0.5.0\n    filter: function(fun, context){\n\n      var t = Object(this);\n      var len = t.length >>> 0;\n      if (typeof fun !== \"function\")\n        throw new TypeError();\n\n      var res = [];\n      for (var i = 0; i < len; i++)\n      {\n        if (i in t)\n        {\n          var val = t[i];\n          if (fun.call(context, val, i, t))\n            res.push(val);\n        }\n      }\n\n      return res;\n    }\n  });\n\n  // Function proto;\n  extend(Function.prototype, {\n    bind: function(context){\n      var fn = this;\n      var preArgs = slice.call(arguments, 1);\n      return function(){\n        var args = preArgs.concat(slice.call(arguments));\n        return fn.apply(context, args);\n      }\n    }\n  })\n  \n  // Array\n  extend(Array, {\n    isArray: function(arr){\n      return tstr.call(arr) === \"[object Array]\";\n    }\n  })\n}\n\n"},"hash":"96e6c69869003f16c1f36680d7bf909a"}