{"dependencies":[{"name":"../util","loc":{"line":1,"column":16}},{"name":"../config","loc":{"line":3,"column":21}},{"name":"./node","loc":{"line":4,"column":19}},{"name":"./Lexer","loc":{"line":5,"column":20}}],"generated":{"js":"var _ = require(\"../util\");\n\nvar config = require(\"../config\");\nvar node = require(\"./node\");\nvar Lexer = require(\"./Lexer\");\nvar varName = _.varName;\nvar ctxName = _.ctxName;\nvar extName = _.extName;\nvar isPath = _.makePredicate(\"STRING IDENT NUMBER\");\nvar isKeyWord = _.makePredicate(\"true false undefined null this Array Date JSON Math NaN RegExp decodeURI decodeURIComponent encodeURI encodeURIComponent parseFloat parseInt Object\");\nvar isInvalidTag = _.makePredicate(\"script style\");\nvar isLastBind = /\\.bind$/;\n\n\n\nfunction Parser(input, opts){\n  opts = opts || {};\n\n  this.input = input;\n  this.tokens = new Lexer(input, opts).lex();\n  this.pos = 0;\n  this.length = this.tokens.length;\n}\n\n\nvar op = Parser.prototype;\n\n\nop.parse = function(){\n  this.pos = 0;\n  var res= this.program();\n  if(this.ll().type === 'TAG_CLOSE'){\n    this.error(\"You may got a unclosed Tag\")\n  }\n  return res;\n}\n\nop.ll =  function(k){\n  k = k || 1;\n  if(k < 0) k = k + 1;\n  var pos = this.pos + k - 1;\n  if(pos > this.length - 1){\n      return this.tokens[this.length-1];\n  }\n  return this.tokens[pos];\n}\n  // lookahead\nop.la = function(k){\n  return (this.ll(k) || '').type;\n}\n\nop.match = function(type, value){\n  var ll;\n  if(!(ll = this.eat(type, value))){\n    ll  = this.ll();\n    this.error('expect [' + type + (value == null? '':':'+ value) + ']\" -> got \"[' + ll.type + (value==null? '':':'+ll.value) + ']', ll.pos)\n  }else{\n    return ll;\n  }\n}\n\nop.error = function(msg, pos){\n  msg =  \"\\n【 parse failed 】 \" + msg +  ':\\n\\n' + _.trackErrorPos(this.input, typeof pos === 'number'? pos: this.ll().pos||0);\n  throw new Error(msg);\n}\n\nop.next = function(k){\n  k = k || 1;\n  this.pos += k;\n}\nop.eat = function(type, value){\n  var ll = this.ll();\n  if(typeof type !== 'string'){\n    for(var len = type.length ; len--;){\n      if(ll.type === type[len]) {\n        this.next();\n        return ll;\n      }\n    }\n  }else{\n    if( ll.type === type && (typeof value === 'undefined' || ll.value === value) ){\n       this.next();\n       return ll;\n    }\n  }\n  return false;\n}\n\n// program\n//  :EOF\n//  | (statement)* EOF\nop.program = function(isAttr){\n  var statements = [],  ll = this.ll();\n  while(ll.type !== 'EOF' && ll.type !=='TAG_CLOSE'){\n\n    statements.push(this.statement());\n    ll = this.ll();\n    // {~ <div></div>}\n    if( isAttr && ll.type === 'END'){\n      this.next();\n      return node.body(statements)\n    }\n  }\n  // if(ll.type === 'TAG_CLOSE') this.error(\"You may have unmatched Tag\")\n  return statements;\n}\n\n// statement\n//  : xml\n//  | jst\n//  | text\nvar rRN = /\\r\\n/g;\nop.statement = function(){\n  var ll = this.ll();\n  switch(ll.type){\n    case 'NAME':\n    case 'TEXT':\n      var text = ll.value;\n      this.next();\n      while(ll = this.eat(['NAME', 'TEXT'])){\n        text += ll.value;\n      }\n      return node.text(text.replace(rRN, '\\n'));\n    case 'TAG_OPEN':\n      return this.xml();\n    case 'OPEN': \n      return this.directive();\n    case 'EXPR_OPEN':\n      return this.interplation();\n    default:\n      this.error('Unexpected token: '+ this.la())\n  }\n}\n\n// xml \n// stag statement* TAG_CLOSE?(if self-closed tag)\nop.xml = function(){\n  var name, attrs, children, selfClosed;\n  name = this.match('TAG_OPEN').value;\n\n  if( isInvalidTag(name)){\n    this.error('Invalid Tag: ' + name);\n  }\n  attrs = this.attrs();\n  selfClosed = this.eat('/')\n  this.match('>');\n  if( !selfClosed && !_.isVoidTag(name) ){\n    children = this.program();\n    if(!this.eat('TAG_CLOSE', name)) this.error('expect </'+name+'> got'+ 'no matched closeTag')\n  }\n  return node.element(name, attrs, children);\n}\n\n// xentity\n//  -rule(wrap attribute)\n//  -attribute\n//\n// __example__\n//  name = 1 |  \n//  ng-hide |\n//  on-click={{}} | \n//  {{#if name}}on-click={{xx}}{{#else}}on-tap={{}}{{/if}}\n\nop.xentity = function(ll){\n  var name = ll.value, value, modifier;\n  if(ll.type === 'NAME'){\n    //@ only for test\n    if(~name.indexOf('.')){\n      var tmp = name.split('.');\n      name = tmp[0];\n      modifier = tmp[1]\n\n    }\n    if( this.eat(\"=\") ) value = this.attvalue(modifier);\n    return node.attribute( name, value, modifier );\n  }else{\n    if( name !== 'if') this.error(\"current version. ONLY RULE #if #else #elseif is valid in tag, the rule #\" + name + ' is invalid');\n    return this['if'](true);\n  }\n\n}\n\n// stag     ::=    '<' Name (S attr)* S? '>'  \n// attr    ::=     Name Eq attvalue\nop.attrs = function(isAttribute){\n  var eat\n  if(!isAttribute){\n    eat = [\"NAME\", \"OPEN\"]\n  }else{\n    eat = [\"NAME\"]\n  }\n\n  var attrs = [], ll;\n  while (ll = this.eat(eat)){\n    attrs.push(this.xentity( ll ))\n  }\n  return attrs;\n}\n\n// attvalue\n//  : STRING  \n//  | NAME\nop.attvalue = function(mdf){\n  var ll = this.ll();\n  switch(ll.type){\n    case \"NAME\":\n    case \"UNQ\":\n    case \"STRING\":\n      this.next();\n      var value = ll.value;\n      return value;\n    case \"EXPR_OPEN\":\n      return this.interplation();\n    case \"BODY_OPEN\":\n      this.next();\n      return this.program(true);\n    default:\n      this.error('Unexpected token: '+ this.la())\n  }\n}\n\n\n// {{#}}\nop.directive = function(){\n  var name = this.ll().value;\n  this.next();\n  if(typeof this[name] === 'function'){\n    return this[name]()\n  }else{\n    this.error('Undefined directive['+ name +']');\n  }\n}\n\n\n\n\n\n// {{}}\nop.interplation = function(){\n  this.match('EXPR_OPEN');\n  var res = this.expression(true);\n  this.match('END');\n  return res;\n}\n\n// {{~}}\nop.inc = op.include = function(){\n  var content = this.expression();\n  this.match('END');\n  return node.template(content);\n}\n\n// {{#if}}\nop[\"if\"] = function(tag){\n  var test = this.expression();\n  var consequent = [], alternate=[];\n\n  var container = consequent;\n  var statement = !tag? \"statement\" : \"attrs\";\n\n  this.match('END');\n\n  var ll, close;\n  while( ! (close = this.eat('CLOSE')) ){\n    ll = this.ll();\n    if( ll.type === 'OPEN' ){\n      switch( ll.value ){\n        case 'else':\n          container = alternate;\n          this.next();\n          this.match( 'END' );\n          break;\n        case 'elseif':\n          this.next();\n          alternate.push( this[\"if\"](tag) );\n          return node['if']( test, consequent, alternate );\n        default:\n          container.push( this[statement](true) );\n      }\n    }else{\n      container.push(this[statement](true));\n    }\n  }\n  // if statement not matched\n  if(close.value !== \"if\") this.error('Unmatched if directive')\n  return node[\"if\"](test, consequent, alternate);\n}\n\n\n// @mark   mustache syntax have natrure dis, canot with expression\n// {{#list}}\nop.list = function(){\n  // sequence can be a list or hash\n  var sequence = this.expression(), variable, ll, track;\n  var consequent = [], alternate=[];\n  var container = consequent;\n\n  this.match('IDENT', 'as');\n\n  variable = this.match('IDENT').value;\n\n  if(this.eat('IDENT', 'by')){\n    if(this.eat('IDENT',variable + '_index')){\n      track = true;\n    }else{\n      track = this.expression();\n      if(track.constant){\n        // true is means constant, we handle it just like xxx_index.\n        track = true;\n      }\n    }\n  }\n\n  this.match('END');\n\n  while( !(ll = this.eat('CLOSE')) ){\n    if(this.eat('OPEN', 'else')){\n      container =  alternate;\n      this.match('END');\n    }else{\n      container.push(this.statement());\n    }\n  }\n  \n  if(ll.value !== 'list') this.error('expect ' + 'list got ' + '/' + ll.value + ' ', ll.pos );\n  return node.list(sequence, variable, consequent, alternate, track);\n}\n\n\nop.expression = function(){\n  var expression;\n  if(this.eat('@(')){ //once bind\n    expression = this.expr();\n    expression.once = true;\n    this.match(')')\n  }else{\n    expression = this.expr();\n  }\n  return expression;\n}\n\nop.expr = function(){\n  this.depend = [];\n\n  var buffer = this.filter()\n\n  var body = buffer.get || buffer;\n  var setbody = buffer.set;\n  return node.expression(body, setbody, !this.depend.length, buffer.filters);\n}\n\n\n// filter\n// assign ('|' filtername[':' args]) * \nop.filter = function(){\n  var left = this.assign();\n  var ll = this.eat('|');\n  var buffer = [], filters,setBuffer, prefix,\n    attr = \"t\", \n    set = left.set, get, \n    tmp = \"\";\n\n  if(ll){\n    if(set) {\n      setBuffer = [];\n      filters = [];\n    }\n\n    prefix = \"(function(\" + attr + \"){\";\n\n    do{\n      var filterName = this.match('IDENT').value;\n      tmp = attr + \" = \" + ctxName + \"._f_('\" + filterName + \"' ).get.call( \"+_.ctxName +\",\" + attr ;\n      if(this.eat(':')){\n        tmp +=\", \"+ this.arguments(\"|\").join(\",\") + \");\"\n      }else{\n        tmp += ');'\n      }\n      buffer.push(tmp);\n      \n      if(set){\n        // only in runtime ,we can detect  whether  the filter has a set function. \n        filters.push(filterName);\n        setBuffer.unshift( tmp.replace(\" ).get.call\", \" ).set.call\") );\n      }\n\n    }while(ll = this.eat('|'));\n    buffer.push(\"return \" + attr );\n    setBuffer && setBuffer.push(\"return \" + attr);\n\n    get =  prefix + buffer.join(\"\") + \"})(\"+left.get+\")\";\n    // we call back to value.\n    if(setBuffer){\n      // change _ss__(name, _p_) to _s__(name, filterFn(_p_));\n      set = set.replace(_.setName, \n        prefix + setBuffer.join(\"\") + \"})(\"+　_.setName　+\")\" );\n\n    }\n    // the set function is depend on the filter definition. if it have set method, the set will work\n    var ret = getset(get, set);\n    ret.filters = filters;\n    return ret;\n  }\n  return left;\n}\n\n// assign\n// left-hand-expr = condition\nop.assign = function(){\n  var left = this.condition(), ll;\n  if(ll = this.eat(['=', '+=', '-=', '*=', '/=', '%='])){\n    if(!left.set) this.error('invalid lefthand expression in assignment expression');\n    return getset( left.set.replace( \",\" + _.setName, \",\" + this.condition().get ).replace(\"'='\", \"'\"+ll.type+\"'\"), left.set);\n    // return getset('(' + left.get + ll.type  + this.condition().get + ')', left.set);\n  }\n  return left;\n}\n\n// or\n// or ? assign : assign\nop.condition = function(){\n\n  var test = this.or();\n  if(this.eat('?')){\n    return getset([test.get + \"?\", \n      this.assign().get, \n      this.match(\":\").type, \n      this.assign().get].join(\"\"));\n  }\n\n  return test;\n}\n\n// and\n// and && or\nop.or = function(){\n\n  var left = this.and();\n\n  if(this.eat('||')){\n    return getset(left.get + '||' + this.or().get);\n  }\n\n  return left;\n}\n// equal\n// equal && and\nop.and = function(){\n\n  var left = this.equal();\n\n  if(this.eat('&&')){\n    return getset(left.get + '&&' + this.and().get);\n  }\n  return left;\n}\n// relation\n// \n// equal == relation\n// equal != relation\n// equal === relation\n// equal !== relation\nop.equal = function(){\n  var left = this.relation(), ll;\n  // @perf;\n  if( ll = this.eat(['==','!=', '===', '!=='])){\n    return getset(left.get + ll.type + this.equal().get);\n  }\n  return left\n}\n// relation < additive\n// relation > additive\n// relation <= additive\n// relation >= additive\n// relation in additive\nop.relation = function(){\n  var left = this.additive(), ll;\n  // @perf\n  if(ll = (this.eat(['<', '>', '>=', '<=']) || this.eat('IDENT', 'in') )){\n    return getset(left.get + ll.value + this.relation().get);\n  }\n  return left\n}\n// additive :\n// multive\n// additive + multive\n// additive - multive\nop.additive = function(){\n  var left = this.multive() ,ll;\n  if(ll= this.eat(['+','-']) ){\n    return getset(left.get + ll.value + this.additive().get);\n  }\n  return left\n}\n// multive :\n// unary\n// multive * unary\n// multive / unary\n// multive % unary\nop.multive = function(){\n  var left = this.range() ,ll;\n  if( ll = this.eat(['*', '/' ,'%']) ){\n    return getset(left.get + ll.type + this.multive().get);\n  }\n  return left;\n}\n\nop.range = function(){\n  var left = this.unary(), ll, right;\n\n  if(ll = this.eat('..')){\n    right = this.unary();\n    var body = \n      \"(function(start,end){var res = [],step=end>start?1:-1; for(var i = start; end>start?i <= end: i>=end; i=i+step){res.push(i); } return res })(\"+left.get+\",\"+right.get+\")\"\n    return getset(body);\n  }\n\n  return left;\n}\n\n\n\n// lefthand\n// + unary\n// - unary\n// ~ unary\n// ! unary\nop.unary = function(){\n  var ll;\n  if(ll = this.eat(['+','-','~', '!'])){\n    return getset('(' + ll.type + this.unary().get + ')') ;\n  }else{\n    return this.member()\n  }\n}\n\n// call[lefthand] :\n// member args\n// member [ expression ]\n// member . ident  \n\nop.member = function(base, last, pathes, prevBase){\n  var ll, path;\n\n\n  var onlySimpleAccessor = false;\n  if(!base){ //first\n    path = this.primary();\n    var type = typeof path;\n    if(type === 'string'){ \n      pathes = [];\n      pathes.push( path );\n      last = path;\n      base = ctxName + \"._sg_('\" + path + \"', \" + varName + \", \" + extName + \")\";\n      onlySimpleAccessor = true;\n    }else{ //Primative Type\n      if(path.get === 'this'){\n        base = ctxName;\n        pathes = ['this'];\n      }else{\n        pathes = null;\n        base = path.get;\n      }\n    }\n  }else{ // not first enter\n    if(typeof last === 'string' && isPath( last) ){ // is valid path\n      pathes.push(last);\n    }else{\n      if(pathes && pathes.length) this.depend.push(pathes);\n      pathes = null;\n    }\n  }\n  if(ll = this.eat(['[', '.', '('])){\n    switch(ll.type){\n      case '.':\n          // member(object, property, computed)\n        var tmpName = this.match('IDENT').value;\n        prevBase = base;\n        if( this.la() !== \"(\" ){ \n          base = ctxName + \"._sg_('\" + tmpName + \"', \" + base + \")\";\n        }else{\n          base += \".\" + tmpName ;\n        }\n        return this.member( base, tmpName, pathes,  prevBase);\n      case '[':\n          // member(object, property, computed)\n        path = this.assign();\n        prevBase = base;\n        if( this.la() !== \"(\" ){ \n        // means function call, we need throw undefined error when call function\n        // and confirm that the function call wont lose its context\n          base = ctxName + \"._sg_(\" + path.get + \", \" + base + \")\";\n        }else{\n          base += \"[\" + path.get + \"]\";\n        }\n        this.match(']')\n        return this.member(base, path, pathes, prevBase);\n      case '(':\n        // call(callee, args)\n\n        base = base.replace(isLastBind, '.__bind__')\n        var args = this.arguments().join(',');\n\n        base =  base+\"(\" + args +\")\";\n        this.match(')')\n        return this.member(base, null, pathes);\n    }\n  }\n  if( pathes && pathes.length ) this.depend.push( pathes );\n  var res =  {get: base};\n  if(last){\n    res.set = ctxName + \"._ss_(\" + \n        (last.get? last.get : \"'\"+ last + \"'\") + \n        \",\"+ _.setName + \",\"+ \n        (prevBase?prevBase:_.varName) + \n        \", '=', \"+ ( onlySimpleAccessor? 1 : 0 ) + \")\";\n  \n  }\n  return res;\n}\n\n/**\n * \n */\nop.arguments = function(end){\n  end = end || ')'\n  var args = [];\n  do{\n    if(this.la() !== end){\n      args.push(this.assign().get)\n    }\n  }while( this.eat(','));\n  return args\n}\n\n\n// primary :\n// this \n// ident\n// literal\n// array\n// object\n// ( expression )\n\nop.primary = function(){\n  var ll = this.ll();\n  switch(ll.type){\n    case \"{\":\n      return this.object();\n    case \"[\":\n      return this.array();\n    case \"(\":\n      return this.paren();\n    // literal or ident\n    case 'STRING':\n      this.next();\n      var value = \"\" + ll.value;\n      var quota = ~value.indexOf(\"'\")? \"\\\"\": \"'\" ;\n      return getset(quota + value + quota);\n    case 'NUMBER':\n      this.next();\n      return getset( \"\" + ll.value );\n    case \"IDENT\":\n      this.next();\n      if(isKeyWord(ll.value)){\n        return getset( ll.value );\n      }\n      return ll.value;\n    default: \n      this.error('Unexpected Token: ' + ll.type);\n  }\n}\n\n// object\n//  {propAssign [, propAssign] * [,]}\n\n// propAssign\n//  prop : assign\n\n// prop\n//  STRING\n//  IDENT\n//  NUMBER\n\nop.object = function(){\n  var code = [this.match('{').type];\n\n  var ll = this.eat( ['STRING', 'IDENT', 'NUMBER'] );\n  while(ll){\n    code.push(\"'\" + ll.value + \"'\" + this.match(':').type);\n    var get = this.assign().get;\n    code.push(get);\n    ll = null;\n    if(this.eat(\",\") && (ll = this.eat(['STRING', 'IDENT', 'NUMBER'])) ) code.push(\",\");\n  }\n  code.push(this.match('}').type);\n  return {get: code.join(\"\")}\n}\n\n// array\n// [ assign[,assign]*]\nop.array = function(){\n  var code = [this.match('[').type], item;\n  if( this.eat(\"]\") ){\n\n     code.push(\"]\");\n  } else {\n    while(item = this.assign()){\n      code.push(item.get);\n      if(this.eat(',')) code.push(\",\");\n      else break;\n    }\n    code.push(this.match(']').type);\n  }\n  return {get: code.join(\"\")};\n}\n\n// '(' expression ')'\nop.paren = function(){\n  this.match('(');\n  var res = this.filter()\n  res.get = '(' + res.get + ')';\n  res.set = res.set;\n  this.match(')');\n  return res;\n}\n\nfunction getset(get, set){\n  return {\n    get: get,\n    set: set\n  }\n}\n\n\n\nmodule.exports = Parser;\n"},"hash":"495f9c9336541d90bab0ccab5eb747ea"}