{"dependencies":[{"name":"../util.js","loc":{"line":3,"column":34}}],"generated":{"js":"// simplest event emitter 60 lines\n// ===============================\nvar slice = [].slice, _ = require(\"../util.js\");\nvar API = {\n  $on: function(event, fn) {\n    if(typeof event === \"object\"){\n      for (var i in event) {\n        this.$on(i, event[i]);\n      }\n    }else{\n      // @patch: for list\n      var context = this;\n      var handles = context._handles || (context._handles = {}),\n        calls = handles[event] || (handles[event] = []);\n      calls.push(fn);\n    }\n    return this;\n  },\n  $off: function(event, fn) {\n    var context = this;\n    if(!context._handles) return;\n    if(!event) this._handles = {};\n    var handles = context._handles,\n      calls;\n\n    if (calls = handles[event]) {\n      if (!fn) {\n        handles[event] = [];\n        return context;\n      }\n      for (var i = 0, len = calls.length; i < len; i++) {\n        if (fn === calls[i]) {\n          calls.splice(i, 1);\n          return context;\n        }\n      }\n    }\n    return context;\n  },\n  // bubble event\n  $emit: function(event){\n    // @patch: for list\n    var context = this;\n    var handles = context._handles, calls, args, type;\n    if(!event) return;\n    var args = slice.call(arguments, 1);\n    var type = event;\n\n    if(!handles) return context;\n    if(calls = handles[type.slice(1)]){\n      for (var j = 0, len = calls.length; j < len; j++) {\n        calls[j].apply(context, args)\n      }\n    }\n    if (!(calls = handles[type])) return context;\n    for (var i = 0, len = calls.length; i < len; i++) {\n      calls[i].apply(context, args)\n    }\n    // if(calls.length) context.$update();\n    return context;\n  },\n  // capture  event\n  $one: function(){\n    \n}\n}\n// container class\nfunction Event() {}\n_.extend(Event.prototype, API)\n\nEvent.mixTo = function(obj){\n  obj = typeof obj === \"function\" ? obj.prototype : obj;\n  _.extend(obj, API)\n}\nmodule.exports = Event;"},"hash":"5834a6235dff8e2d6100921366a741f0"}