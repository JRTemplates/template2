{"dependencies":[{"name":"../util","loc":{"line":5,"column":16}},{"name":"../dom","loc":{"line":6,"column":18}},{"name":"../render/client","loc":{"line":7,"column":22}}],"generated":{"js":"/**\n * event directive  bundle\n *\n */\nvar _ = require(\"../util\");\nvar dom = require(\"../dom\");\nvar Regular = require(\"../render/client\");\n\nRegular._addProtoInheritCache(\"event\");\n\nRegular.directive( /^on-\\w+$/, function( elem, value, name , attrs) {\n  if ( !name || !value ) return;\n  var type = name.split(\"-\")[1];\n  return this._handleEvent( elem, type, value, attrs );\n});\n// TODO.\n/**\n- $('dx').delegate()\n*/\nRegular.directive( /^(delegate|de)-\\w+$/, function( elem, value, name ) {\n  var root = this.$root;\n  var _delegates = root._delegates || ( root._delegates = {} );\n  if ( !name || !value ) return;\n  var type = name.split(\"-\")[1];\n  var fire = _.handleEvent.call(this, value, type);\n\n  function delegateEvent(ev){\n    matchParent(ev, _delegates[type], root.parentNode);\n  }\n\n  if( !_delegates[type] ){\n    _delegates[type] = [];\n\n    if(root.parentNode){\n      dom.on(root.parentNode, type, delegateEvent);\n    }else{\n      root.$on( \"$inject\", function( node, position, preParent ){\n        var newParent = this.parentNode;\n        if( preParent ){\n          dom.off(preParent, type, delegateEvent);\n        }\n        if(newParent) dom.on(this.parentNode, type, delegateEvent);\n      })\n    }\n    root.$on(\"$destroy\", function(){\n      if(root.parentNode) dom.off(root.parentNode, type, delegateEvent)\n      _delegates[type] = null;\n    })\n  }\n  var delegate = {\n    element: elem,\n    fire: fire\n  }\n  _delegates[type].push( delegate );\n\n  return function(){\n    var delegates = _delegates[type];\n    if(!delegates || !delegates.length) return;\n    for( var i = 0, len = delegates.length; i < len; i++ ){\n      if( delegates[i] === delegate ) delegates.splice(i, 1);\n    }\n  }\n\n});\n\n\nfunction matchParent(ev , delegates, stop){\n  if(!stop) return;\n  var target = ev.target, pair;\n  while(target && target !== stop){\n    for( var i = 0, len = delegates.length; i < len; i++ ){\n      pair = delegates[i];\n      if(pair && pair.element === target){\n        pair.fire(ev)\n      }\n    }\n    target = target.parentNode;\n  }\n}"},"hash":"4bace74357dc7bbf26aabdf670c619cf"}