{"dependencies":[{"name":"../state.js","loc":{"line":2,"column":20}},{"name":"../history.js","loc":{"line":3,"column":20}},{"name":"./base.js","loc":{"line":4,"column":17}},{"name":"../util.js","loc":{"line":5,"column":14}}],"generated":{"js":"\nvar State = require(\"../state.js\"),\n  History = require(\"../history.js\"),\n  Base = require(\"./base.js\"),\n  _ = require(\"../util.js\"),\n  baseTitle = document.title,\n  stateFn = State.prototype.state;\n\nfunction StateMan(options){\n\n  if(this instanceof StateMan === false){ return new StateMan(options); }\n  options = options || {};\n  Base.call(this, options);\n  if(options.history) this.history = options.history;\n  this._stashCallback = [];\n  this.current = this.active = this;\n  // auto update document.title, when navigation has been down\n  this.on(\"end\", function( options ){\n    var cur = this.current;\n    document.title = cur.getTitle( options ) ||  baseTitle  ;\n  });\n}\n\nvar o =_.inherit( StateMan, Base.prototype );\n\n_.extend(o , {\n\n    start: function(options, callback){\n\n      this._startCallback = callback;\n      if( !this.history ) this.history = new History(options); \n      if( !this.history.isStart ){\n        this.history.on(\"change\", _.bind(this._afterPathChange, this));\n        this.history.start();\n      } \n      return this;\n\n    },\n    stop: function(){\n      this.history.stop();\n    },\n    // @TODO direct go the point state\n    go: function(state, option, callback){\n      option = option || {};\n      var statename;\n      if(typeof state === \"string\") {\n         statename = state;\n         state = this.state(state);\n      }\n\n      if(!state) return this._notfound({state:statename});\n\n      if(typeof option === \"function\"){\n        callback = option;\n        option = {};\n      }\n\n      if(option.encode !== false){\n        var url = state.encode(option.param);\n        option.path = url;\n        this.nav(url, {silent: true, replace: option.replace});\n      }\n\n      this._go(state, option, callback);\n\n      return this;\n    },\n    nav: function(url, options, callback){\n      if(typeof options === \"function\"){\n        callback = options;\n        options = {};\n      }\n      options = options || {};\n\n      options.path = url;\n\n      this.history.nav( url, _.extend({silent: true}, options));\n      if(!options.silent) this._afterPathChange( _.cleanPath(url) , options , callback);\n\n      return this;\n    },\n\n    // after pathchange changed\n    // @TODO: afterPathChange need based on decode\n    _afterPathChange: function(path, options ,callback){\n\n      this.emit(\"history:change\", path);\n\n      var found = this.decode(path);\n\n      options = options || {};\n\n      options.path = path;\n\n      if(!found){\n        return this._notfound(options);\n      }\n\n      options.param = found.param;\n\n      if( options.firstTime && !callback){\n        callback =  this._startCallback;\n        delete this._startCallback;\n      }\n\n      this._go( found.state, options, callback );\n    },\n    _notfound: function(options){\n\n\n      return this.emit(\"notfound\", options);\n    },\n    // goto the state with some option\n    _go: function(state, option, callback){\n\n      var over;\n\n  \n\n      if(state.hasNext && this.strict) return this._notfound({name: state.name});\n\n  \n      option.param = option.param || {};\n\n      var current = this.current,\n        baseState = this._findBase(current, state),\n        prepath = this.path,\n        self = this;\n\n\n      if( typeof callback === \"function\" ) this._stashCallback.push(callback);\n      // if we done the navigating when start\n      function done(success){\n        over = true;\n        if( success !== false ) self.emit(\"end\", option);\n        self.pending = null;\n        self._popStash(option);\n      }\n      \n      option.previous = current;\n      option.current = state;\n\n      if(current !== state){\n        option.stop = function(){\n          done(false);\n          self.nav( prepath? prepath: \"/\", {silent:true});\n        };\n        self.emit(\"begin\", option);\n\n      }\n      // if we stop it in 'begin' listener\n      if(over === true) return;\n\n      option.phase = 'permission';\n      this._walk(current, state, option, true , _.bind( function( notRejected ){\n\n        if( notRejected===false ){\n          // if reject in callForPermission, we will return to old \n          prepath && this.nav( prepath, {silent: true});\n\n          done(false, 2);\n\n          return this.emit('abort', option);\n\n        } \n\n        // stop previous pending.\n        if(this.pending) this.pending.stop();\n        this.pending = option;\n        this.path = option.path;\n        this.current = option.current;\n        this.param = option.param;\n        this.previous = option.previous;\n        option.phase = 'navigation';\n        this._walk(current, state, option, false, _.bind(function( notRejected ){\n\n          if( notRejected === false ){\n            this.current = this.active;\n            done(false);\n            return this.emit('abort', option);\n          }\n\n\n          this.active = option.current;\n\n          option.phase = 'completion';\n          return done();\n\n        }, this) );\n\n      }, this) );\n\n\n    },\n    _popStash: function(option){\n\n      var stash = this._stashCallback, len = stash.length;\n\n      this._stashCallback = [];\n\n      if(!len) return;\n\n      for(var i = 0; i < len; i++){\n        stash[i].call(this, option);\n      }\n    },\n\n    // the transition logic  Used in Both canLeave canEnter && leave enter LifeCycle\n\n    _walk: function(from, to, option, callForPermit , callback){\n      // if(from === to) return callback();\n\n      // nothing -> app.state\n      var parent = this._findBase(from , to);\n      var self = this;\n\n\n      option.backward = true;\n      this._transit( from, parent, option, callForPermit , function( notRejected ){\n\n        if( notRejected === false ) return callback( notRejected );\n\n        // only actual transiton need update base state;\n        option.backward = false;\n        self._walkUpdate(self, parent, option, callForPermit, function(notRejected){\n          if(notRejected === false) return callback(notRejected);\n\n          self._transit( parent, to, option, callForPermit,  callback);\n\n        });\n\n      });\n\n    },\n\n    _transit: function(from, to, option, callForPermit, callback){\n      //  touch the ending\n      if( from === to ) return callback();\n\n      var back = from.name.length > to.name.length;\n      var method = back? 'leave': 'enter';\n      var applied;\n\n      // use canEnter to detect permission\n      if( callForPermit) method = 'can' + method.replace(/^\\w/, function(a){ return a.toUpperCase(); });\n\n      var loop = _.bind(function( notRejected ){\n\n\n        // stop transition or touch the end\n        if( applied === to || notRejected === false ) return callback(notRejected);\n\n        if( !applied ) {\n\n          applied = back? from : this._computeNext(from, to);\n\n        }else{\n\n          applied = this._computeNext(applied, to);\n        }\n\n        if( (back && applied === to) || !applied )return callback( notRejected );\n\n        this._moveOn( applied, method, option, loop );\n\n      }, this);\n\n      loop();\n    },\n\n    _moveOn: function( applied, method, option, callback){\n\n      var isDone = false;\n      var isPending = false;\n\n      option.async = function(){\n\n        isPending = true;\n\n        return done;\n      };\n\n      function done( notRejected ){\n        if( isDone ) return;\n        isPending = false;\n        isDone = true;\n        callback( notRejected );\n      }\n\n      option.stop = function(){\n        done( false );\n      };\n\n\n      this.active = applied;\n      var retValue = applied[method]? applied[method]( option ): true;\n\n      if(method === 'enter') applied.visited = true;\n      // promise\n      // need breadk , if we call option.stop first;\n\n      if( _.isPromise(retValue) ){\n\n        return this._wrapPromise(retValue, done); \n\n      }\n\n      // if haven't call option.async yet\n      if( !isPending ) done( retValue );\n\n    },\n\n\n    _wrapPromise: function( promise, next ){\n\n      return promise.then( next, function(err){ \n        //TODO: 万一promise中throw了Error如何处理？\n        if(err instanceof Error) throw err;\n        next(false); \n      }) ;\n\n    },\n\n    _computeNext: function( from, to ){\n\n      var fname = from.name;\n      var tname = to.name;\n\n      var tsplit = tname.split('.');\n      var fsplit = fname.split('.');\n\n      var tlen = tsplit.length;\n      var flen = fsplit.length;\n\n      if(fname === '') flen = 0;\n      if(tname === '') tlen = 0;\n\n      if( flen < tlen ){\n        fsplit[flen] = tsplit[flen];\n      }else{\n        fsplit.pop();\n      }\n\n      return this.state(fsplit.join('.'));\n\n    },\n\n    _findQuery: function(querystr){\n\n      var queries = querystr && querystr.split(\"&\"), query= {};\n      if(queries){\n        var len = queries.length;\n        for(var i =0; i< len; i++){\n          var tmp = queries[i].split(\"=\");\n          query[tmp[0]] = tmp[1];\n        }\n      }\n      return query;\n\n    },\n\n    _sortState: function( a, b ){\n      return ( b.priority || 0 ) - ( a.priority || 0 );\n    },\n    // find the same branch;\n    _findBase: function(now, before){\n\n      if(!now || !before || now == this || before == this) return this;\n      var np = now, bp = before, tmp;\n      while(np && bp){\n        tmp = bp;\n        while(tmp){\n          if(np === tmp) return tmp;\n          tmp = tmp.parent;\n        }\n        np = np.parent;\n      }\n    },\n    // check the query and Param\n    _walkUpdate: function(baseState, to, options, callForPermit,  done){\n\n      var method = callForPermit? 'canUpdate': 'update';\n      var from = baseState;\n      var self = this;\n\n      var pathes = [], node = to;\n      while(node !== this){\n        pathes.push( node );\n        node = node.parent;\n      }\n\n      var loop = function( notRejected ){\n        if( notRejected === false ) return done( false );\n        if( !pathes.length ) return done();\n        from = pathes.pop();\n        self._moveOn( from, method, options, loop )\n      }\n\n      self._moveOn( from, method, options, loop )\n    }\n\n}, true);\n\nmodule.exports = StateMan;\n"},"hash":"2e2f35e51da618f683aea79ce5e69f91"}