{"dependencies":[{"name":"../util.js","loc":{"line":1,"column":16}}],"generated":{"js":"var _ = require('../util.js');\n\nfunction simpleDiff(now, old){\n  var nlen = now.length;\n  var olen = old.length;\n  if(nlen !== olen){\n    return true;\n  }\n  for(var i = 0; i < nlen ; i++){\n    if(now[i] !== old[i]) return  true;\n  }\n  return false\n\n}\n\nfunction equals(a,b){\n  return a === b;\n}\n\n// array1 - old array\n// array2 - new array\nfunction ld(array1, array2, equalFn){\n  var n = array1.length;\n  var m = array2.length;\n  var equalFn = equalFn || equals;\n  var matrix = [];\n  for(var i = 0; i <= n; i++){\n    matrix.push([i]);\n  }\n  for(var j=1;j<=m;j++){\n    matrix[0][j]=j;\n  }\n  for(var i = 1; i <= n; i++){\n    for(var j = 1; j <= m; j++){\n      if(equalFn(array1[i-1], array2[j-1])){\n        matrix[i][j] = matrix[i-1][j-1];\n      }else{\n        matrix[i][j] = Math.min(\n          matrix[i-1][j]+1, //delete\n          matrix[i][j-1]+1//add\n          )\n      }\n    }\n  }\n  return matrix;\n}\n// arr2 - new array\n// arr1 - old array\nfunction diffArray(arr2, arr1, diff, diffFn) {\n  if(!diff) return simpleDiff(arr2, arr1);\n  var matrix = ld(arr1, arr2, diffFn)\n  var n = arr1.length;\n  var i = n;\n  var m = arr2.length;\n  var j = m;\n  var edits = [];\n  var current = matrix[i][j];\n  while(i>0 || j>0){\n  // the last line\n    if (i === 0) {\n      edits.unshift(3);\n      j--;\n      continue;\n    }\n    // the last col\n    if (j === 0) {\n      edits.unshift(2);\n      i--;\n      continue;\n    }\n    var northWest = matrix[i - 1][j - 1];\n    var west = matrix[i - 1][j];\n    var north = matrix[i][j - 1];\n\n    var min = Math.min(north, west, northWest);\n\n    if (min === west) {\n      edits.unshift(2); //delete\n      i--;\n      current = west;\n    } else if (min === northWest ) {\n      if (northWest === current) {\n        edits.unshift(0); //no change\n      } else {\n        edits.unshift(1); //update\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else {\n      edits.unshift(3); //add\n      j--;\n      current = north;\n    }\n  }\n  var LEAVE = 0;\n  var ADD = 3;\n  var DELELE = 2;\n  var UPDATE = 1;\n  var n = 0;m=0;\n  var steps = [];\n  var step = {index: null, add:0, removed:[]};\n\n  for(var i=0;i<edits.length;i++){\n    if(edits[i] > 0 ){ // NOT LEAVE\n      if(step.index === null){\n        step.index = m;\n      }\n    } else { //LEAVE\n      if(step.index != null){\n        steps.push(step)\n        step = {index: null, add:0, removed:[]};\n      }\n    }\n    switch(edits[i]){\n      case LEAVE:\n        n++;\n        m++;\n        break;\n      case ADD:\n        step.add++;\n        m++;\n        break;\n      case DELELE:\n        step.removed.push(arr1[n])\n        n++;\n        break;\n      case UPDATE:\n        step.add++;\n        step.removed.push(arr1[n])\n        n++;\n        m++;\n        break;\n    }\n  }\n  if(step.index != null){\n    steps.push(step)\n  }\n  return steps\n}\n\n\n\n// diffObject\n// ----\n// test if obj1 deepEqual obj2\nfunction diffObject( now, last, diff ){\n\n\n  if(!diff){\n\n    for( var j in now ){\n      if( last[j] !== now[j] ) return true\n    }\n\n    for( var n in last ){\n      if(last[n] !== now[n]) return true;\n    }\n\n  }else{\n\n    var nKeys = _.keys(now);\n    var lKeys = _.keys(last);\n\n    /**\n     * [description]\n     * @param  {[type]} a    [description]\n     * @param  {[type]} b){                   return now[b] [description]\n     * @return {[type]}      [description]\n     */\n    return diffArray(nKeys, lKeys, diff, function(a, b){\n      return now[b] === last[a];\n    });\n\n  }\n\n  return false;\n\n\n}\n\nmodule.exports = {\n  diffArray: diffArray,\n  diffObject: diffObject\n}"},"hash":"33476013aeb5d318e05d4d00c1770abb"}