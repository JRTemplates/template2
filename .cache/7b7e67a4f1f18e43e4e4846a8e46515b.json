{"dependencies":[{"name":"../util","loc":{"line":1,"column":16}},{"name":"./parse","loc":{"line":2,"column":30}},{"name":"./diff","loc":{"line":3,"column":19}}],"generated":{"js":"var _ = require('../util');\nvar parseExpression = require('./parse').expression;\nvar diff = require('./diff');\nvar diffArray = diff.diffArray;\nvar diffObject = diff.diffObject;\n\nfunction Watcher(){}\n\nvar methods = {\n  $watch: function(expr, fn, options){\n    var get, once, test, rlen, isStable = false, extra = this.__ext__; //records length\n    if(!this._watchers) this._watchers = [];\n    if(!this._watchersForStable) this._watchersForStable = [];\n\n    options = options || {};\n    if(options === true){\n       options = { deep: true }\n    }\n    var uid = _.uid('w_');\n    if(Array.isArray(expr)){\n      var tests = [];\n      for(var i = 0,len = expr.length; i < len; i++){\n          tests.push(this.$expression(expr[i]).get)\n      }\n      var prev = [];\n      test = function(context){\n        var equal = true;\n        for(var i =0, len = tests.length; i < len; i++){\n          var splice = tests[i](context, extra);\n          if(!_.equals(splice, prev[i])){\n             equal = false;\n             prev[i] = splice;//_.clone(splice);\n          }\n        }\n        return equal? false: prev;\n      }\n    }else{\n      if(typeof expr === 'function'){\n        get = expr.bind(this);      \n      }else{\n        expr = this.$expression(expr);\n        if(_.isExpr(expr)) {\n          get = expr.get;\n          once = expr.once;\n        } else {\n          get = function(){return expr};\n          once = true;\n          isStable = true;\n        }\n      }\n    }\n\n    var watcher = {\n      id: uid, \n      get: get, \n      fn: fn, \n      once: once, \n      force: options.force,\n      // don't use ld to resolve array diff\n      diff: options.diff,\n      test: test,\n      deep: options.deep,\n      last: options.sync? get(this): options.last\n    }\n\n\n    this[(options.stable || isStable)? '_watchersForStable': '_watchers'].push(watcher);\n    \n    rlen = this._records && this._records.length;\n    if(rlen) this._records[rlen-1].push(watcher)\n    // init state.\n    if(options.init === true){\n      var prephase = this.$phase;\n      this.$phase = 'digest';\n      this._checkSingleWatch( watcher);\n      this.$phase = prephase;\n    }\n    return watcher;\n  },\n  $unwatch: function( watcher ){\n    if(!this._watchers || !watcher) return;\n    var watchers = this._watchers;\n    var type = typeof watcher;\n\n    if(type === 'object'){\n      var len = watcher.length;\n      if(!len){\n        watcher.removed = true\n      }else{\n        while( (len--) >= 0 ){\n          this.$unwatch(watcher[len])\n        }\n      }\n    }else if(type === 'number'){\n      var id = watcher;\n      watcher =  _.findItem( watchers, function(item){\n        return item.id === id;\n      } );\n      if(!watcher) watcher = _.findItem(this._watchersForStable, function( item ){\n        return item.id === id\n      })\n      return this.$unwatch(watcher);\n    }\n    return this;\n  },\n  $expression: function(value){\n    return this._touchExpr(parseExpression(value))\n  },\n  /**\n   * the whole digest loop ,just like angular, it just a dirty-check loop;\n   * @param  {String} path  now regular process a pure dirty-check loop, but in parse phase, \n   *                  Regular's parser extract the dependencies, in future maybe it will change to dirty-check combine with path-aware update;\n   * @return {Void}   \n   */\n\n  $digest: function(){\n    if(this.$phase === 'digest' || this._mute) return;\n    this.$phase = 'digest';\n    var dirty = false, n =0;\n    while(dirty = this._digest()){\n\n      if((++n) > 20){ // max loop\n        throw Error('there may a circular dependencies reaches')\n      }\n    }\n    // stable watch is dirty\n    var stableDirty =  this._digest(true);\n\n    if( (n > 0 || stableDirty) && this.$emit) {\n      this.$emit(\"$update\");\n      if (this.devtools) {\n        this.devtools.emit(\"flush\", this)\n      }\n    }\n    this.$phase = null;\n  },\n  // private digest logic\n  _digest: function(stable){\n    if(this._mute) return;\n    var watchers = !stable? this._watchers: this._watchersForStable;\n    var dirty = false, children, watcher, watcherDirty;\n    var len = watchers && watchers.length;\n    if(len){\n      var mark = 0, needRemoved=0;\n      for(var i =0; i < len; i++ ){\n        watcher = watchers[i];\n        var shouldRemove = !watcher ||  watcher.removed;\n        if( shouldRemove ){\n          needRemoved += 1;\n        }else{\n          watcherDirty = this._checkSingleWatch(watcher);\n          if(watcherDirty) dirty = true;\n        }\n        // remove when encounter first unmoved item or touch the end\n        if( !shouldRemove || i === len-1 ){\n          if( needRemoved ){\n            watchers.splice(mark, needRemoved );          \n            len -= needRemoved;\n            i -= needRemoved;\n            needRemoved = 0;\n          }\n          mark = i+1;\n        }\n      }\n    }\n    // check children's dirty.\n    children = this._children;\n    if(children && children.length){\n      for(var m = 0, mlen = children.length; m < mlen; m++){\n        var child = children[m];\n        if(child && child._digest(stable)) dirty = true;\n      }\n    }\n    return dirty;\n  },\n  // check a single one watcher \n  _checkSingleWatch: function(watcher){\n    var dirty = false;\n    if(!watcher) return;\n\n    var now, last, tlast, tnow,  eq, diff;\n\n    if(!watcher.test){\n\n      now = watcher.get(this);\n      last = watcher.last;\n\n      if(now !== last || watcher.force){\n        tlast = _.typeOf(last);\n        tnow = _.typeOf(now);\n        eq = true; \n\n        // !Object\n        if( !(tnow === 'object' && tlast==='object' && watcher.deep) ){\n          // Array\n          if( tnow === 'array' && ( tlast=='undefined' || tlast === 'array') ){\n            diff = diffArray(now, watcher.last || [], watcher.diff)\n            if( tlast !== 'array' || diff === true || diff.length ) dirty = true;\n          }else{\n            eq = _.equals( now, last );\n            if( !eq || watcher.force ){\n              watcher.force = null;\n              dirty = true; \n            }\n          }\n        }else{\n          diff =  diffObject( now, last, watcher.diff );\n          if( diff === true || diff.length ) dirty = true;\n        }\n      }\n\n    } else{\n      // @TODO 是否把多重改掉\n      var result = watcher.test(this);\n      if(result){\n        dirty = true;\n        watcher.fn.apply(this, result)\n      }\n    }\n    if(dirty && !watcher.test){\n      if(tnow === 'object' && watcher.deep || tnow === 'array'){\n        watcher.last = _.clone(now);\n      }else{\n        watcher.last = now;\n      }\n      watcher.fn.call(this, now, last, diff)\n      if(watcher.once) this.$unwatch(watcher)\n    }\n\n    return dirty;\n  },\n\n  /**\n   * **tips**: whatever param you passed in $update, after the function called, dirty-check(digest) phase will enter;\n   * \n   * @param  {Function|String|Expression} path  \n   * @param  {Whatever} value optional, when path is Function, the value is ignored\n   * @return {this}     this \n   */\n  $set: function(path, value){\n    if(path != null){\n      var type = typeof (path);\n      if( type === 'string' || path.type === 'expression' ){\n        path = this.$expression(path);\n        path.set(this, value);\n      }else if(type === 'function'){\n        path.call(this, this.data);\n      }else{\n        for(var i in path) {\n          this.$set(i, path[i])\n        }\n      }\n    }\n  },\n  // 1. expr canbe string or a Expression\n  // 2. detect: if true, if expr is a string will directly return;\n  $get: function(expr, detect)  {\n    if(detect && typeof expr === 'string') return expr;\n    return this.$expression(expr).get(this);\n  },\n  $update: function(){\n    var rootParent = this;\n    if(rootParent.$phase==='destroyed') return this;\n    do{\n      if(rootParent.data.isolate || !rootParent.$parent) break;\n      rootParent = rootParent.$parent;\n    } while(rootParent)\n\n    var prephase =rootParent.$phase;\n    rootParent.$phase = 'digest'\n\n    this.$set.apply(this, arguments);\n\n    rootParent.$phase = prephase\n\n    rootParent.$digest();\n    return this;\n  },\n  // auto collect watchers for logic-control.\n  _record: function(){\n    if(!this._records) this._records = [];\n    this._records.push([]);\n  },\n  _release: function(){\n    return this._records.pop();\n  }\n}\n\n\n_.extend(Watcher.prototype, methods)\n\n\nWatcher.mixTo = function(obj){\n  obj = typeof obj === \"function\" ? obj.prototype : obj;\n  return _.extend(obj, methods)\n}\n\nmodule.exports = Watcher;\n"},"hash":"8b6bd5662513a2dd0e1d84d14a5c3f4e"}