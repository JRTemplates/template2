{"dependencies":[{"name":"./helper/diff.js","loc":{"line":1,"column":24}},{"name":"./helper/combine.js","loc":{"line":2,"column":22}},{"name":"./helper/animate.js","loc":{"line":3,"column":22}},{"name":"./parser/node.js","loc":{"line":4,"column":19}},{"name":"./group.js","loc":{"line":5,"column":20}},{"name":"./dom.js","loc":{"line":6,"column":18}},{"name":"./util","loc":{"line":7,"column":16}}],"generated":{"js":"var diffArray = require('./helper/diff.js').diffArray;\nvar combine = require('./helper/combine.js');\nvar animate = require(\"./helper/animate.js\");\nvar node = require(\"./parser/node.js\");\nvar Group = require('./group.js');\nvar dom = require(\"./dom.js\");\nvar _ = require('./util');\n\n\nvar walkers = module.exports = {};\n\nwalkers.list = function(ast, options){\n\n  var Regular = walkers.Regular;  \n  var placeholder = document.createComment(\"Regular list\"),\n    namespace = options.namespace,\n    extra = options.extra;\n  var self = this;\n  var group = new Group([placeholder]);\n  var indexName = ast.variable + '_index';\n  var keyName = ast.variable + '_key';\n  var variable = ast.variable;\n  var alternate = ast.alternate;\n  var track = ast.track, keyOf, extraObj;\n\n  if( track && track !== true ){\n    track = this._touchExpr(track);\n    extraObj = _.createObject(extra);\n    keyOf = function( item, index ){\n      extraObj[ variable ] = item;\n      extraObj[ indexName ] = index;\n      // @FIX keyName\n      return track.get( self, extraObj );\n    }\n  }\n\n  function removeRange(index, rlen){\n    for(var j = 0; j< rlen; j++){ //removed\n      var removed = group.children.splice( index + 1, 1)[0];\n      if(removed) removed.destroy(true);\n    }\n  }\n\n  function addRange(index, end, newList, rawNewValue){\n    for(var o = index; o < end; o++){ //add\n      // prototype inherit\n      var item = newList[o];\n      var data = {};\n      updateTarget(data, o, item, rawNewValue);\n\n      data = _.createObject(extra, data);\n      var section = self.$compile(ast.body, {\n        extra: data,\n        namespace:namespace,\n        record: true,\n        outer: options.outer\n      })\n      section.data = data;\n      // autolink\n      var insert =  combine.last(group.get(o));\n      if(insert.parentNode){\n        animate.inject(combine.node(section),insert, 'after');\n      }\n      // insert.parentNode.insertBefore(combine.node(section), insert.nextSibling);\n      group.children.splice( o + 1 , 0, section);\n    }\n  }\n\n  function updateTarget(target, index, item, rawNewValue){\n\n      target[ indexName ] = index;\n      if( rawNewValue ){\n        target[ keyName ] = item;\n        target[ variable ] = rawNewValue[ item ];\n      }else{\n        target[ variable ] = item;\n        target[keyName] = null\n      }\n  }\n\n\n  function updateRange(start, end, newList, rawNewValue){\n    for(var k = start; k < end; k++){ // no change\n      var sect = group.get( k + 1 ), item = newList[ k ];\n      updateTarget(sect.data, k, item, rawNewValue);\n    }\n  }\n\n  function updateLD(newList, oldList, splices , rawNewValue ){\n\n    var cur = placeholder;\n    var m = 0, len = newList.length;\n\n    if(!splices && (len !==0 || oldList.length !==0)  ){\n      splices = diffArray(newList, oldList, true);\n    }\n\n    if(!splices || !splices.length) return;\n      \n    for(var i = 0; i < splices.length; i++){ //init\n      var splice = splices[i];\n      var index = splice.index; // beacuse we use a comment for placeholder\n      var removed = splice.removed;\n      var add = splice.add;\n      var rlen = removed.length;\n      // for track\n      if( track && rlen && add ){\n        var minar = Math.min(rlen, add);\n        var tIndex = 0;\n        while(tIndex < minar){\n          if( keyOf(newList[index], index) !== keyOf( removed[0], index ) ){\n            removeRange(index, 1)\n            addRange(index, index+1, newList, rawNewValue)\n          }\n          removed.shift();\n          add--;\n          index++;\n          tIndex++;\n        }\n        rlen = removed.length;\n      }\n      // update\n      updateRange(m, index, newList, rawNewValue);\n\n      removeRange( index ,rlen)\n\n      addRange(index, index+add, newList, rawNewValue)\n\n      m = index + add - rlen;\n      m  = m < 0? 0 : m;\n\n    }\n    if(m < len){\n      for(var i = m; i < len; i++){\n        var pair = group.get(i + 1);\n        pair.data[indexName] = i;\n        // @TODO fix keys\n      }\n    }\n  }\n\n  // if the track is constant test.\n  function updateSimple(newList, oldList, rawNewValue ){\n\n    var nlen = newList.length;\n    var olen = oldList.length;\n    var mlen = Math.min(nlen, olen);\n\n    updateRange(0, mlen, newList, rawNewValue)\n    if(nlen < olen){ //need add\n      removeRange(nlen, olen-nlen);\n    }else if(nlen > olen){\n      addRange(olen, nlen, newList, rawNewValue);\n    }\n  }\n\n  function update(newValue, oldValue, splices){\n\n    var nType = _.typeOf( newValue );\n    var oType = _.typeOf( oldValue );\n\n    var newList = getListFromValue( newValue, nType );\n    var oldList = getListFromValue( oldValue, oType );\n\n    var rawNewValue;\n\n\n    var nlen = newList && newList.length;\n    var olen = oldList && oldList.length;\n\n    // if previous list has , we need to remove the altnated section.\n    if( !olen && nlen && group.get(1) ){\n      var altGroup = group.children.pop();\n      if(altGroup.destroy)  altGroup.destroy(true);\n    }\n\n    if( nType === 'object' ) rawNewValue = newValue;\n\n    if(track === true){\n      updateSimple( newList, oldList,  rawNewValue );\n    }else{\n      updateLD( newList, oldList, splices, rawNewValue );\n    }\n\n    // @ {#list} {#else}\n    if( !nlen && alternate && alternate.length){\n      var section = self.$compile(alternate, {\n        extra: extra,\n        record: true,\n        outer: options.outer,\n        namespace: namespace\n      })\n      group.children.push(section);\n      if(placeholder.parentNode){\n        animate.inject(combine.node(section), placeholder, 'after');\n      }\n    }\n  }\n\n  this.$watch(ast.sequence, update, { \n    init: true, \n    diff: track !== true ,\n    deep: true\n  });\n  return group;\n}\n\n\nfunction updateItem(){\n  \n}\n\n\n// {#include } or {#inc template}\nwalkers.template = function(ast, options){\n  var content = ast.content, compiled;\n  var placeholder = document.createComment('inlcude');\n  var compiled, namespace = options.namespace, extra = options.extra;\n  var group = new Group([placeholder]);\n  if(content){\n    var self = this;\n    this.$watch(content, function(value){\n      var removed = group.get(1), type= typeof value;\n      if( removed){\n        removed.destroy(true); \n        group.children.pop();\n      }\n      if(!value) return;\n\n      group.push( compiled = type === 'function' ? value(): self.$compile( type !== 'object'? String(value): value, {\n        record: true, \n        outer: options.outer,\n        namespace: namespace, \n        extra: extra}) ); \n      if(placeholder.parentNode) {\n        compiled.$inject(placeholder, 'before')\n      }\n    }, {\n      init: true\n    });\n  }\n  return group;\n};\n\nfunction getListFromValue(value, type){\n  return type === 'object'? _.keys(value): (\n      type === 'array'? value: []\n    )\n}\n\n\n// how to resolve this problem\nvar ii = 0;\nwalkers['if'] = function(ast, options){\n  var self = this, consequent, alternate, extra = options.extra;\n  if(options && options.element){ // attribute inteplation\n    var update = function(nvalue){\n      if(!!nvalue){\n        if(alternate) combine.destroy(alternate)\n        if(ast.consequent) consequent = self.$compile(ast.consequent, {record: true, element: options.element , extra:extra});\n      }else{\n        if(consequent) combine.destroy(consequent)\n        if(ast.alternate) alternate = self.$compile(ast.alternate, {record: true, element: options.element, extra: extra});\n      }\n    }\n    this.$watch(ast.test, update, { force: true });\n    return {\n      destroy: function(){\n        if(consequent) combine.destroy(consequent);\n        else if(alternate) combine.destroy(alternate);\n      }\n    }\n  }\n\n  var test, consequent, alternate, node;\n  var placeholder = document.createComment(\"Regular if\" + ii++);\n  var group = new Group();\n  group.push(placeholder);\n  var preValue = null, namespace= options.namespace;\n\n\n  var update = function (nvalue, old){\n    var value = !!nvalue;\n    if(value === preValue) return;\n    preValue = value;\n    if(group.children[1]){\n      group.children[1].destroy(true);\n      group.children.pop();\n    }\n    if(value){ //true\n      if(ast.consequent && ast.consequent.length){\n        consequent = self.$compile( ast.consequent , {record:true, outer: options.outer,namespace: namespace, extra:extra })\n        // placeholder.parentNode && placeholder.parentNode.insertBefore( node, placeholder );\n        group.push(consequent);\n        if(placeholder.parentNode){\n          animate.inject(combine.node(consequent), placeholder, 'before');\n        }\n      }\n    }else{ //false\n      if(ast.alternate && ast.alternate.length){\n        alternate = self.$compile(ast.alternate, {record:true, outer: options.outer,namespace: namespace, extra:extra});\n        group.push(alternate);\n        if(placeholder.parentNode){\n          animate.inject(combine.node(alternate), placeholder, 'before');\n        }\n      }\n    }\n  }\n  this.$watch(ast.test, update, {force: true, init: true});\n\n  return group;\n}\n\n\nwalkers.expression = function(ast, options){\n  var node = document.createTextNode(\"\");\n  this.$watch(ast, function(newval){\n    dom.text(node, \"\" + (newval == null? \"\": \"\" + newval) );\n  },{init: true})\n  return node;\n}\nwalkers.text = function(ast, options){\n  var node = document.createTextNode(_.convertEntity(ast.text));\n  return node;\n}\n\n\n\nvar eventReg = /^on-(.+)$/\n\n/**\n * walkers element (contains component)\n */\nwalkers.element = function(ast, options){\n  var attrs = ast.attrs, self = this,\n    Constructor = this.constructor,\n    children = ast.children,\n    namespace = options.namespace, \n    extra = options.extra,\n    tag = ast.tag,\n    Component = Constructor.component(tag),\n    ref, group, element;\n\n  if( tag === 'r-content' ){\n    _.log('r-content is deprecated, use {#inc this.$body} instead (`{#include}` as same)', 'warn');\n    return this.$body && this.$body();\n  } \n\n  if(Component || tag === 'r-component'){\n    options.Component = Component;\n    return walkers.component.call(this, ast, options)\n  }\n\n  if(tag === 'svg') namespace = \"svg\";\n  // @Deprecated: may be removed in next version, use {#inc } instead\n  \n  if( children && children.length ){\n    group = this.$compile(children, {outer: options.outer,namespace: namespace, extra: extra });\n  }\n\n  element = dom.create(tag, namespace, attrs);\n\n  if(group && !_.isVoidTag(tag)){\n    dom.inject( combine.node(group) , element)\n  }\n\n  // sort before\n  if(!ast.touched){\n    attrs.sort(function(a1, a2){\n      var d1 = Constructor.directive(a1.name),\n        d2 = Constructor.directive(a2.name);\n      if( d1 && d2 ) return (d2.priority || 1) - (d1.priority || 1);\n      if(d1) return 1;\n      if(d2) return -1;\n      if(a2.name === \"type\") return 1;\n      return -1;\n    })\n    ast.touched = true;\n  }\n  // may distinct with if else\n  var destroies = walkAttributes.call(this, attrs, element, extra);\n\n  return {\n    type: \"element\",\n    group: group,\n    node: function(){\n      return element;\n    },\n    last: function(){\n      return element;\n    },\n    destroy: function(first){\n      if( first ){\n        animate.remove( element, group? group.destroy.bind( group ): _.noop );\n      }else if(group) {\n        group.destroy();\n      }\n      // destroy ref\n      if( destroies.length ) {\n        destroies.forEach(function( destroy ){\n          if( destroy ){\n            if( typeof destroy.destroy === 'function' ){\n              destroy.destroy()\n            }else{\n              destroy();\n            }\n          }\n        })\n      }\n    }\n  }\n}\n\nwalkers.component = function(ast, options){\n  var attrs = ast.attrs, \n    Component = options.Component,\n    Constructor = this.constructor,\n    isolate, \n    extra = options.extra,\n    namespace = options.namespace,\n    ref, self = this, is;\n\n  var data = {}, events;\n\n  for(var i = 0, len = attrs.length; i < len; i++){\n    var attr = attrs[i];\n    // consider disabled   equlasto  disabled={true}\n    var value = this._touchExpr(attr.value === undefined? true: attr.value);\n    if(value.constant) value = attr.value = value.get(this);\n    if(attr.value && attr.value.constant === true){\n      value = value.get(this);\n    }\n    var name = attr.name;\n    if(!attr.event){\n      var etest = name.match(eventReg);\n      // event: 'nav'\n      if(etest) attr.event = etest[1];\n    }\n\n    // @compile modifier\n    if(attr.mdf === 'cmpl'){\n      value = _.getCompileFn(value, this, {\n        record: true, \n        namespace:namespace, \n        extra: extra, \n        outer: options.outer\n      })\n    }\n    \n    // @if is r-component . we need to find the target Component\n    if(name === 'is' && !Component){\n      is = value;\n      var componentName = this.$get(value, true);\n      Component = Constructor.component(componentName)\n      if(typeof Component !== 'function') throw new Error(\"component \" + componentName + \" has not registed!\");\n    }\n    // bind event proxy\n    var eventName;\n    if(eventName = attr.event){\n      events = events || {};\n      events[eventName] = _.handleEvent.call(this, value, eventName);\n      continue;\n    }else {\n      name = attr.name = _.camelCase(name);\n    }\n\n    if(value.type !== 'expression'){\n      data[name] = value;\n    }else{\n      data[name] = value.get(self); \n    }\n    if( name === 'ref'  && value != null){\n      ref = value\n    }\n    if( name === 'isolate'){\n      // 1: stop: composite -> parent\n      // 2. stop: composite <- parent\n      // 3. stop 1 and 2: composite <-> parent\n      // 0. stop nothing (defualt)\n      isolate = value.type === 'expression'? value.get(self): parseInt(value === true? 3: value, 10);\n      data.isolate = isolate;\n    }\n  }\n\n  var definition = { \n    data: data, \n    events: events, \n    $parent: (isolate & 2)? null: this,\n    $root: this.$root,\n    $outer: options.outer,\n    _body: {\n      ctx: this,\n      ast: ast.children\n    }\n  }\n  var options = {\n    namespace: namespace, \n    extra: options.extra\n  }\n\n\n  var component = new Component(definition, options), reflink;\n\n\n  if(ref && this.$refs){\n    reflink = Component.directive('ref').link\n    this.$on('$destroy', reflink.call(this, component, ref) )\n  }\n  if(ref &&  self.$refs) self.$refs[ref] = component;\n  for(var i = 0, len = attrs.length; i < len; i++){\n    var attr = attrs[i];\n    var value = attr.value||true;\n    var name = attr.name;\n    // need compiled\n    if(value.type === 'expression' && !attr.event){\n      value = self._touchExpr(value);\n      // use bit operate to control scope\n      if( !(isolate & 2) ) \n        this.$watch(value, (function(name, val){\n          this.data[name] = val;\n        }).bind(component, name))\n      if( value.set && !(isolate & 1 ) ) \n        // sync the data. it force the component don't trigger attr.name's first dirty echeck\n        component.$watch(name, self.$update.bind(self, value), {sync: true});\n    }\n  }\n  if(is && is.type === 'expression'  ){\n    var group = new Group();\n    group.push(component);\n    this.$watch(is, function(value){\n      // found the new component\n      var Component = Constructor.component(value);\n      if(!Component) throw new Error(\"component \" + value + \" has not registed!\");\n      var ncomponent = new Component(definition);\n      var component = group.children.pop();\n      group.push(ncomponent);\n      ncomponent.$inject(combine.last(component), 'after')\n      component.destroy();\n      // @TODO  if component changed , we need update ref\n      if(ref){\n        self.$refs[ref] = ncomponent;\n      }\n    }, {sync: true})\n    return group;\n  }\n  return component;\n}\n\nfunction walkAttributes(attrs, element, extra){\n  var bindings = []\n  for(var i = 0, len = attrs.length; i < len; i++){\n    var binding = this._walk(attrs[i], {element: element, fromElement: true, attrs: attrs, extra: extra})\n    if(binding) bindings.push(binding);\n  }\n  return bindings;\n}\n\nwalkers.attribute = function(ast ,options){\n\n  var attr = ast;\n  var name = attr.name;\n  var value = attr.value || \"\";\n  var constant = value.constant;\n  var Component = this.constructor;\n  var directive = Component.directive(name);\n  var element = options.element;\n  var self = this;\n\n\n  value = this._touchExpr(value);\n\n  if(constant) value = value.get(this);\n\n  if(directive && directive.link){\n    var binding = directive.link.call(self, element, value, name, options.attrs);\n    if(typeof binding === 'function') binding = {destroy: binding}; \n    return binding;\n  } else{\n    if(value.type === 'expression' ){\n      this.$watch(value, function(nvalue, old){\n        dom.attr(element, name, nvalue);\n      }, {init: true});\n    }else{\n      if(_.isBooleanAttr(name)){\n        dom.attr(element, name, true);\n      }else{\n        dom.attr(element, name, value);\n      }\n    }\n    if(!options.fromElement){\n      return {\n        destroy: function(){\n          dom.attr(element, name, null);\n        }\n      }\n    }\n  }\n\n}\n\n"},"hash":"87cb4b7f9eb848d61fe9bb4747cf2e39"}