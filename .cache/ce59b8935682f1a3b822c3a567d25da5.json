{"dependencies":[{"name":"../util.js","loc":{"line":2,"column":14}},{"name":"../helper/animate.js","loc":{"line":3,"column":19}},{"name":"../dom.js","loc":{"line":4,"column":15}},{"name":"../Regular.js","loc":{"line":5,"column":19}}],"generated":{"js":"var // packages\n  _ = require(\"../util.js\"),\n animate = require(\"../helper/animate.js\"),\n dom = require(\"../dom.js\"),\n Regular = require(\"../Regular.js\");\n\n\nvar // variables\n  rClassName = /^[-\\w]+(\\s[-\\w]+)*$/,\n  rCommaSep = /[\\r\\n\\f ]*,[\\r\\n\\f ]*(?=\\w+\\:)/, //  dont split comma in  Expression\n  rStyles = /^\\{.*\\}$/, //  for Simpilfy\n  rSpace = /\\s+/, //  for Simpilfy\n  WHEN_COMMAND = \"when\",\n  EVENT_COMMAND = \"on\",\n  THEN_COMMAND = \"then\";\n\n/**\n * Animation Plugin\n * @param {Component} Component \n */\n\n\nfunction createSeed(type){\n\n  var steps = [], current = 0, callback = _.noop;\n  var key;\n\n  var out = {\n    type: type,\n    start: function(cb){\n      key = _.uid();\n      if(typeof cb === \"function\") callback = cb;\n      if(current> 0 ){\n        current = 0 ;\n      }else{\n        out.step();\n      }\n      return out.compelete;\n    },\n    compelete: function(){\n      key = null;\n      callback && callback();\n      callback = _.noop;\n      current = 0;\n    },\n    step: function(){\n      if(steps[current]) steps[current ]( out.done.bind(out, key) );\n    },\n    done: function(pkey){\n      if(pkey !== key) return; // means the loop is down\n      if( current < steps.length - 1 ) {\n        current++;\n        out.step();\n      }else{\n        out.compelete();\n      }\n    },\n    push: function(step){\n      steps.push(step)\n    }\n  }\n\n  return out;\n}\n\nRegular._addProtoInheritCache(\"animation\")\n\n\n// builtin animation\nRegular.animation({\n  \"wait\": function( step ){\n    var timeout = parseInt( step.param ) || 0\n    return function(done){\n      // _.log(\"delay \" + timeout)\n      setTimeout( done, timeout );\n    }\n  },\n  \"class\": function(step){\n    var tmp = step.param.split(\",\"),\n      className = tmp[0] || \"\",\n      mode = parseInt(tmp[1]) || 1;\n\n    return function(done){\n      // _.log(className)\n      animate.startClassAnimate( step.element, className , done, mode );\n    }\n  },\n  \"call\": function(step){\n    var fn = this.$expression(step.param).get, self = this;\n    return function(done){\n      // _.log(step.param, 'call')\n      fn(self);\n      self.$update();\n      done()\n    }\n  },\n  \"emit\": function(step){\n    var param = step.param;\n    var tmp = param.split(\",\"),\n      evt = tmp[0] || \"\",\n      args = tmp[1]? this.$expression(tmp[1]).get: null;\n\n    if(!evt) throw Error(\"you shoud specified a eventname in emit command\");\n\n    var self = this;\n    return function(done){\n      self.$emit(evt, args? args(self) : undefined);\n      done();\n    }\n  },\n  // style: left {10}px,\n  style: function(step){\n    var styles = {}, \n      param = step.param,\n      pairs = param.split(\",\"), valid;\n    pairs.forEach(function(pair){\n      pair = pair.trim();\n      if(pair){\n        var tmp = pair.split( rSpace ),\n          name = tmp.shift(),\n          value = tmp.join(\" \");\n\n        if( !name || !value ) throw Error(\"invalid style in command: style\");\n        styles[name] = value;\n        valid = true;\n      }\n    })\n\n    return function(done){\n      if(valid){\n        animate.startStyleAnimate(step.element, styles, done);\n      }else{\n        done();\n      }\n    }\n  }\n})\n\n\n\n// hancdle the r-animation directive\n// el : the element to process\n// value: the directive value\nfunction processAnimate( element, value ){\n  var Component = this.constructor;\n\n  if(_.isExpr(value)){\n    value = value.get(this);\n  }\n\n  value = value.trim();\n\n  var composites = value.split(\";\"), \n    composite, context = this, seeds = [], seed, destroies = [], destroy,\n    command, param , current = 0, tmp, animator, self = this;\n\n  function reset( type ){\n    seed && seeds.push( seed )\n    seed = createSeed( type );\n  }\n\n  function whenCallback(start, value){\n    if( !!value ) start()\n  }\n\n  function animationDestroy(element){\n    return function(){\n      element.onenter = null;\n      element.onleave = null;\n    } \n  }\n\n  for( var i = 0, len = composites.length; i < len; i++ ){\n\n    composite = composites[i];\n    tmp = composite.split(\":\");\n    command = tmp[0] && tmp[0].trim();\n    param = tmp[1] && tmp[1].trim();\n\n    if( !command ) continue;\n\n    if( command === WHEN_COMMAND ){\n      reset(\"when\");\n      this.$watch(param, whenCallback.bind( this, seed.start ) );\n      continue;\n    }\n\n    if( command === EVENT_COMMAND){\n      reset(param);\n      if( param === \"leave\" ){\n        element.onleave = seed.start;\n        destroies.push( animationDestroy(element) );\n      }else if( param === \"enter\" ){\n        element.onenter = seed.start;\n        destroies.push( animationDestroy(element) );\n      }else{\n        if( (\"on\" + param) in element){ // if dom have the event , we use dom event\n          destroies.push(this._handleEvent( element, param, seed.start ));\n        }else{ // otherwise, we use component event\n          this.$on(param, seed.start);\n          destroies.push(this.$off.bind(this, param, seed.start));\n        }\n      }\n      continue;\n    }\n\n    var animator =  Component.animation(command) \n    if( animator && seed ){\n      seed.push(\n        animator.call(this,{\n          element: element,\n          done: seed.done,\n          param: param \n        })\n      )\n    }else{\n      throw Error( animator? \"you should start with `on` or `event` in animation\" : (\"undefined animator 【\" + command +\"】\" ));\n    }\n  }\n\n  if(destroies.length){\n    return function(){\n      destroies.forEach(function(destroy){\n        destroy();\n      })\n    }\n  }\n}\n\n\nRegular.directive( \"r-animation\", processAnimate)\nRegular.directive( \"r-anim\", processAnimate)\n\n"},"hash":"fb4ae1db6bd8140d383c1dcf4954a0c3"}