{"dependencies":[{"name":"../dom","loc":{"line":4,"column":18}},{"name":"./animate","loc":{"line":5,"column":22}}],"generated":{"js":"// some nested  operation in ast \n// --------------------------------\n\nvar dom = require(\"../dom\");\nvar animate = require(\"./animate\");\n\nvar combine = module.exports = {\n\n  // get the initial dom in object\n  node: function(item){\n    var children,node, nodes;\n    if(!item) return;\n    if(typeof item.node === \"function\") return item.node();\n    if(typeof item.nodeType === \"number\") return item;\n    if(item.group) return combine.node(item.group)\n\n    item = item.children || item;\n    if( Array.isArray(item )){\n      var len = item.length;\n      if(len === 1){\n        return combine.node(item[0]);\n      }\n      nodes = [];\n      for(var i = 0, len = item.length; i < len; i++ ){\n        node = combine.node(item[i]);\n        if(Array.isArray(node)){\n          nodes.push.apply(nodes, node)\n        }else if(node) {\n          nodes.push(node)\n        }\n      }\n      return nodes;\n    }\n    \n  },\n  // @TODO remove _gragContainer\n  inject: function(node, pos ){\n    var group = this;\n    var fragment = combine.node(group.group || group);\n    if(node === false) {\n      animate.remove(fragment)\n      return group;\n    }else{\n      if(!fragment) return group;\n      if(typeof node === 'string') node = dom.find(node);\n      if(!node) throw Error('injected node is not found');\n      // use animate to animate firstchildren\n      animate.inject(fragment, node, pos);\n    }\n    // if it is a component\n    if(group.$emit) {\n      var preParent = group.parentNode;\n      var newParent = (pos ==='after' || pos === 'before')? node.parentNode : node;\n      group.parentNode = newParent;\n      group.$emit(\"$inject\", node, pos, preParent);\n    }\n    return group;\n  },\n\n  // get the last dom in object(for insertion operation)\n  last: function(item){\n    var children = item.children;\n\n    if(typeof item.last === \"function\") return item.last();\n    if(typeof item.nodeType === \"number\") return item;\n\n    if(children && children.length) return combine.last(children[children.length - 1]);\n    if(item.group) return combine.last(item.group);\n\n  },\n\n  destroy: function(item, first){\n    if(!item) return;\n    if( typeof item.nodeType === \"number\"  ) return first && dom.remove(item)\n    if( typeof item.destroy === \"function\" ) return item.destroy(first);\n\n    if( Array.isArray(item)){\n      for(var i = 0, len = item.length; i < len; i++ ){\n        combine.destroy(item[i], first);\n      }\n    }\n  }\n\n}\n\n\n// @TODO: need move to dom.js\ndom.element = function( component, all ){\n  if(!component) return !all? null: [];\n  var nodes = combine.node( component );\n  if( nodes.nodeType === 1 ) return all? [nodes]: nodes;\n  var elements = [];\n  for(var i = 0; i<nodes.length ;i++){\n    var node = nodes[i];\n    if( node && node.nodeType === 1){\n      if(!all) return node;\n      elements.push(node);\n    } \n  }\n  return !all? elements[0]: elements;\n}\n\n\n\n"},"hash":"950d176efd8fadd57b5f7a1f63dc2e64"}