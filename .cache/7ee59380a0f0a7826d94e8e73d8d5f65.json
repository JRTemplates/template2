{"dependencies":[{"name":"./env.js","loc":{"line":2,"column":18}},{"name":"./parser/Lexer.js","loc":{"line":3,"column":20}},{"name":"./parser/Parser.js","loc":{"line":4,"column":21}},{"name":"./config.js","loc":{"line":5,"column":21}},{"name":"./util","loc":{"line":6,"column":16}},{"name":"./helper/extend.js","loc":{"line":7,"column":21}},{"name":"./dom.js","loc":{"line":10,"column":20}},{"name":"./walkers.js","loc":{"line":11,"column":24}},{"name":"./group.js","loc":{"line":12,"column":22}},{"name":"./helper/combine.js","loc":{"line":14,"column":20}},{"name":"./helper/event.js","loc":{"line":16,"column":21}},{"name":"./helper/watcher.js","loc":{"line":17,"column":22}},{"name":"./helper/parse.js","loc":{"line":18,"column":20}},{"name":"./helper/filter.js","loc":{"line":19,"column":21}}],"generated":{"js":"\nvar env = require('./env.js');\nvar Lexer = require(\"./parser/Lexer.js\");\nvar Parser = require(\"./parser/Parser.js\");\nvar config = require(\"./config.js\");\nvar _ = require('./util');\nvar extend = require('./helper/extend.js');\nvar combine = {};\nif(env.browser){\n  var dom = require(\"./dom.js\");\n  var walkers = require('./walkers.js');\n  var Group = require('./group.js');\n  var doc = dom.doc;\n  combine = require('./helper/combine.js');\n}\nvar events = require('./helper/event.js');\nvar Watcher = require('./helper/watcher.js');\nvar parse = require('./helper/parse.js');\nvar filter = require('./helper/filter.js');\n\n\n/**\n* `Regular` is regularjs's NameSpace and BaseClass. Every Component is inherited from it\n* \n* @class Regular\n* @module Regular\n* @constructor\n* @param {Object} options specification of the component\n*/\nvar Regular = function(definition, options){\n  var prevRunning = env.isRunning;\n  env.isRunning = true;\n  var node, template;\n\n  definition = definition || {};\n  options = options || {};\n\n  definition.data = definition.data || {};\n  definition.computed = definition.computed || {};\n  definition.events = definition.events || {};\n  if(this.data) _.extend(definition.data, this.data);\n  if(this.computed) _.extend(definition.computed, this.computed);\n  if(this.events) _.extend(definition.events, this.events);\n\n  _.extend(this, definition, true);\n  if(this.$parent){\n     this.$parent._append(this);\n  }\n  this._children = [];\n  this.$refs = {};\n\n  template = this.template;\n\n  // template is a string (len < 16). we will find it container first\n  if((typeof template === 'string' && template.length < 16) && (node = dom.find(template))) {\n    template = node.innerHTML;\n  }\n  // if template is a xml\n  if(template && template.nodeType) template = template.innerHTML;\n  if(typeof template === 'string') this.template = new Parser(template).parse();\n\n  this.computed = handleComputed(this.computed);\n  this.$root = this.$root || this;\n  // if have events\n  if(this.events){\n    this.$on(this.events);\n  }\n  this.$emit(\"$config\");\n  this.config && this.config(this.data);\n\n  var body = this._body;\n  this._body = null;\n\n  if(body && body.ast && body.ast.length){\n    this.$body = _.getCompileFn(body.ast, body.ctx , {\n      outer: this,\n      namespace: options.namespace,\n      extra: options.extra,\n      record: true\n    })\n  }\n  // handle computed\n  if(template){\n    this.group = this.$compile(this.template, {namespace: options.namespace});\n    combine.node(this);\n  }\n\n\n  if(!this.$parent) this.$update();\n  this.$ready = true;\n  this.$emit(\"$init\");\n  if( this.init ) this.init(this.data);\n\n  // @TODO: remove, maybe , there is no need to update after init; \n  // if(this.$root === this) this.$update();\n  env.isRunning = prevRunning;\n\n  // children is not required;\n}\n\n\nwalkers && (walkers.Regular = Regular);\n\n\n// description\n// -------------------------\n// 1. Regular and derived Class use same filter\n_.extend(Regular, {\n  // private data stuff\n  _directives: { __regexp__:[] },\n  _plugins: {},\n  _protoInheritCache: [ 'directive', 'use'] ,\n  __after__: function(supr, o) {\n\n    var template;\n    this.__after__ = supr.__after__;\n\n    // use name make the component global.\n    if(o.name) Regular.component(o.name, this);\n    // this.prototype.template = dom.initTemplate(o)\n    if(template = o.template){\n      var node, name;\n      if( typeof template === 'string' && template.length < 16 && ( node = dom.find( template )) ){\n        template = node.innerHTML;\n        if(name = dom.attr(node, 'name')) Regular.component(name, this);\n      }\n\n      if(template.nodeType) template = template.innerHTML;\n\n      if(typeof template === 'string'){\n        this.prototype.template = new Parser(template).parse();\n      }\n    }\n\n    if(o.computed) this.prototype.computed = handleComputed(o.computed);\n    // inherit directive and other config from supr\n    Regular._inheritConfig(this, supr);\n\n  },\n  /**\n   * Define a directive\n   *\n   * @method directive\n   * @return {Object} Copy of ...\n   */  \n  directive: function(name, cfg){\n\n    if(_.typeOf(name) === \"object\"){\n      for(var k in name){\n        if(name.hasOwnProperty(k)) this.directive(k, name[k]);\n      }\n      return this;\n    }\n    var type = _.typeOf(name);\n    var directives = this._directives, directive;\n    if(cfg == null){\n      if( type === \"string\" && (directive = directives[name]) ) return directive;\n      else{\n        var regexp = directives.__regexp__;\n        for(var i = 0, len = regexp.length; i < len ; i++){\n          directive = regexp[i];\n          var test = directive.regexp.test(name);\n          if(test) return directive;\n        }\n      }\n      return undefined;\n    }\n    if(typeof cfg === 'function') cfg = { link: cfg } \n    if(type === 'string') directives[name] = cfg;\n    else if(type === 'regexp'){\n      cfg.regexp = name;\n      directives.__regexp__.push(cfg)\n    }\n    return this\n  },\n  plugin: function(name, fn){\n    var plugins = this._plugins;\n    if(fn == null) return plugins[name];\n    plugins[name] = fn;\n    return this;\n  },\n  use: function(fn){\n    if(typeof fn === \"string\") fn = Regular.plugin(fn);\n    if(typeof fn !== \"function\") return this;\n    fn(this, Regular);\n    return this;\n  },\n  // config the Regularjs's global\n  config: function(name, value){\n    var needGenLexer = false;\n    if(typeof name === \"object\"){\n      for(var i in name){\n        // if you config\n        if( i ===\"END\" || i==='BEGIN' )  needGenLexer = true;\n        config[i] = name[i];\n      }\n    }\n    if(needGenLexer) Lexer.setup();\n  },\n  expression: parse.expression,\n  Parser: Parser,\n  Lexer: Lexer,\n  _addProtoInheritCache: function(name, transform){\n    if( Array.isArray( name ) ){\n      return name.forEach(Regular._addProtoInheritCache);\n    }\n    var cacheKey = \"_\" + name + \"s\"\n    Regular._protoInheritCache.push(name)\n    Regular[cacheKey] = {};\n    if(Regular[name]) return;\n    Regular[name] = function(key, cfg){\n      var cache = this[cacheKey];\n\n      if(typeof key === \"object\"){\n        for(var i in key){\n          if(key.hasOwnProperty(i)) this[name](i, key[i]);\n        }\n        return this;\n      }\n      if(cfg == null) return cache[key];\n      cache[key] = transform? transform(cfg) : cfg;\n      return this;\n    }\n  },\n  _inheritConfig: function(self, supr){\n\n    // prototype inherit some Regular property\n    // so every Component will have own container to serve directive, filter etc..\n    var defs = Regular._protoInheritCache;\n    var keys = _.slice(defs);\n    keys.forEach(function(key){\n      self[key] = supr[key];\n      var cacheKey = '_' + key + 's';\n      if(supr[cacheKey]) self[cacheKey] = _.createObject(supr[cacheKey]);\n    })\n    return self;\n  }\n\n});\n\nextend(Regular);\n\nRegular._addProtoInheritCache(\"component\")\n\nRegular._addProtoInheritCache(\"filter\", function(cfg){\n  return typeof cfg === \"function\"? {get: cfg}: cfg;\n})\n\n\nevents.mixTo(Regular);\nWatcher.mixTo(Regular);\n\nRegular.implement({\n  init: function(){},\n  config: function(){},\n  destroy: function(){\n    // destroy event wont propgation;\n    this.$emit(\"$destroy\");\n    this.group && this.group.destroy(true);\n    this.group = null;\n    this.parentNode = null;\n    this._watchers = null;\n    this._children = [];\n    var parent = this.$parent;\n    if(parent){\n      var index = parent._children.indexOf(this);\n      parent._children.splice(index,1);\n    }\n    this.$parent = null;\n    this.$root = null;\n    this._handles = null;\n    this.$refs = null;\n  },\n\n  /**\n   * compile a block ast ; return a group;\n   * @param  {Array} parsed ast\n   * @param  {[type]} record\n   * @return {[type]}\n   */\n  $compile: function(ast, options){\n    options = options || {};\n    if(typeof ast === 'string'){\n      ast = new Parser(ast).parse()\n    }\n    var preExt = this.__ext__,\n      record = options.record, \n      records;\n\n    if(options.extra) this.__ext__ = options.extra;\n\n    if(record) this._record();\n    var group = this._walk(ast, options);\n    if(record){\n      records = this._release();\n      var self = this;\n      if(records.length){\n        // auto destroy all wather;\n        group.ondestroy = function(){ self.$unwatch(records); }\n      }\n    }\n    if(options.extra) this.__ext__ = preExt;\n    return group;\n  },\n\n\n  /**\n   * create two-way binding with another component;\n   * *warn*: \n   *   expr1 and expr2 must can operate set&get, for example: the 'a.b' or 'a[b + 1]' is set-able, but 'a.b + 1' is not, \n   *   beacuse Regular dont know how to inverse set through the expression;\n   *   \n   *   if before $bind, two component's state is not sync, the component(passed param) will sync with the called component;\n   *\n   * *example: *\n   *\n   * ```javascript\n   * // in this example, we need to link two pager component\n   * var pager = new Pager({}) // pager compoennt\n   * var pager2 = new Pager({}) // another pager component\n   * pager.$bind(pager2, 'current'); // two way bind throw two component\n   * pager.$bind(pager2, 'total');   // \n   * // or just\n   * pager.$bind(pager2, {\"current\": \"current\", \"total\": \"total\"}) \n   * ```\n   * \n   * @param  {Regular} component the\n   * @param  {String|Expression} expr1     required, self expr1 to operate binding\n   * @param  {String|Expression} expr2     optional, other component's expr to bind with, if not passed, the expr2 will use the expr1;\n   * @return          this;\n   */\n  $bind: function(component, expr1, expr2){\n    var type = _.typeOf(expr1);\n    if( expr1.type === 'expression' || type === 'string' ){\n      this._bind(component, expr1, expr2)\n    }else if( type === \"array\" ){ // multiply same path binding through array\n      for(var i = 0, len = expr1.length; i < len; i++){\n        this._bind(component, expr1[i]);\n      }\n    }else if(type === \"object\"){\n      for(var i in expr1) if(expr1.hasOwnProperty(i)){\n        this._bind(component, i, expr1[i]);\n      }\n    }\n    // digest\n    component.$update();\n    return this;\n  },\n  /**\n   * unbind one component( see $bind also)\n   *\n   * unbind will unbind all relation between two component\n   * \n   * @param  {Regular} component [descriptionegular\n   * @return {This}    this\n   */\n  $unbind: function(){\n    // todo\n  },\n  $inject: combine.inject,\n  $mute: function(isMute){\n\n    isMute = !!isMute;\n\n    var needupdate = isMute === false && this._mute;\n\n    this._mute = !!isMute;\n\n    if(needupdate) this.$update();\n    return this;\n  },\n  // private bind logic\n  _bind: function(component, expr1, expr2){\n\n    var self = this;\n    // basic binding\n\n    if(!component || !(component instanceof Regular)) throw \"$bind() should pass Regular component as first argument\";\n    if(!expr1) throw \"$bind() should  pass as least one expression to bind\";\n\n    if(!expr2) expr2 = expr1;\n\n    expr1 = parse.expression( expr1 );\n    expr2 = parse.expression( expr2 );\n\n    // set is need to operate setting ;\n    if(expr2.set){\n      var wid1 = this.$watch( expr1, function(value){\n        component.$update(expr2, value)\n      });\n      component.$on('$destroy', function(){\n        self.$unwatch(wid1)\n      })\n    }\n    if(expr1.set){\n      var wid2 = component.$watch(expr2, function(value){\n        self.$update(expr1, value)\n      });\n      // when brother destroy, we unlink this watcher\n      this.$on('$destroy', component.$unwatch.bind(component,wid2))\n    }\n    // sync the component's state to called's state\n    expr2.set(component, expr1.get(this));\n  },\n  _walk: function(ast, arg1){\n    if( _.typeOf(ast) === 'array' ){\n      var res = [];\n\n      for(var i = 0, len = ast.length; i < len; i++){\n        res.push( this._walk(ast[i], arg1) );\n      }\n\n      return new Group(res);\n    }\n    if(typeof ast === 'string') return doc.createTextNode(ast)\n    return walkers[ast.type || \"default\"].call(this, ast, arg1);\n  },\n  _append: function(component){\n    this._children.push(component);\n    component.$parent = this;\n  },\n  _handleEvent: function(elem, type, value, attrs){\n    var Component = this.constructor,\n      fire = typeof value !== \"function\"? _.handleEvent.call( this, value, type ) : value,\n      handler = Component.event(type), destroy;\n\n    if ( handler ) {\n      destroy = handler.call(this, elem, fire, attrs);\n    } else {\n      dom.on(elem, type, fire);\n    }\n    return handler ? destroy : function() {\n      dom.off(elem, type, fire);\n    }\n  },\n  // 1. 用来处理exprBody -> Function\n  // 2. list里的循环\n  _touchExpr: function(expr){\n    var  rawget, ext = this.__ext__, touched = {};\n    if(expr.type !== 'expression' || expr.touched) return expr;\n    rawget = expr.get || (expr.get = new Function(_.ctxName, _.extName , _.prefix+ \"return (\" + expr.body + \")\"));\n    touched.get = !ext? rawget: function(context){\n      return rawget(context, ext)\n    }\n\n    if(expr.setbody && !expr.set){\n      var setbody = expr.setbody;\n      expr.set = function(ctx, value, ext){\n        expr.set = new Function(_.ctxName, _.setName , _.extName, _.prefix + setbody);          \n        return expr.set(ctx, value, ext);\n      }\n      expr.setbody = null;\n    }\n    if(expr.set){\n      touched.set = !ext? expr.set : function(ctx, value){\n        return expr.set(ctx, value, ext);\n      }\n    }\n    _.extend(touched, {\n      type: 'expression',\n      touched: true,\n      once: expr.once || expr.constant\n    })\n    return touched\n  },\n  // find filter\n  _f_: function(name){\n    var Component = this.constructor;\n    var filter = Component.filter(name);\n    if(!filter) throw Error('filter ' + name + ' is undefined');\n    return filter;\n  },\n  // simple accessor get\n  _sg_:function(path, defaults, ext){\n    if(typeof ext !== 'undefined'){\n      // if(path === \"demos\")  debugger\n      var computed = this.computed,\n        computedProperty = computed[path];\n      if(computedProperty){\n        if(computedProperty.type==='expression' && !computedProperty.get) this._touchExpr(computedProperty);\n        if(computedProperty.get)  return computedProperty.get(this);\n        else _.log(\"the computed '\" + path + \"' don't define the get function,  get data.\"+path + \" altnately\", \"warn\")\n      }\n  }\n    if(typeof defaults === \"undefined\" || typeof path == \"undefined\" ){\n      return undefined;\n    }\n    return (ext && typeof ext[path] !== 'undefined')? ext[path]: defaults[path];\n\n  },\n  // simple accessor set\n  _ss_:function(path, value, data , op, computed){\n    var computed = this.computed,\n      op = op || \"=\", prev, \n      computedProperty = computed? computed[path]:null;\n\n    if(op !== '='){\n      prev = computedProperty? computedProperty.get(this): data[path];\n      switch(op){\n        case \"+=\":\n          value = prev + value;\n          break;\n        case \"-=\":\n          value = prev - value;\n          break;\n        case \"*=\":\n          value = prev * value;\n          break;\n        case \"/=\":\n          value = prev / value;\n          break;\n        case \"%=\":\n          value = prev % value;\n          break;\n      }\n    }\n    if(computedProperty) {\n      if(computedProperty.set) return computedProperty.set(this, value);\n      else _.log(\"the computed '\" + path + \"' don't define the set function,  assign data.\"+path + \" altnately\", \"warn\" )\n    }\n    data[path] = value;\n    return value;\n  }\n});\n\nRegular.prototype.inject = function(){\n  _.log(\"use $inject instead of inject\", \"error\");\n  return this.$inject.apply(this, arguments);\n}\n\n\n// only one builtin filter\n\nRegular.filter(filter);\n\nmodule.exports = Regular;\n\n\n\nvar handleComputed = (function(){\n  // wrap the computed getter;\n  function wrapGet(get){\n    return function(context){\n      return get.call(context, context.data );\n    }\n  }\n  // wrap the computed setter;\n  function wrapSet(set){\n    return function(context, value){\n      set.call( context, value, context.data );\n      return value;\n    }\n  }\n\n  return function(computed){\n    if(!computed) return;\n    var parsedComputed = {}, handle, pair, type;\n    for(var i in computed){\n      handle = computed[i]\n      type = typeof handle;\n\n      if(handle.type === 'expression'){\n        parsedComputed[i] = handle;\n        continue;\n      }\n      if( type === \"string\" ){\n        parsedComputed[i] = parse.expression(handle)\n      }else{\n        pair = parsedComputed[i] = {type: 'expression'};\n        if(type === \"function\" ){\n          pair.get = wrapGet(handle);\n        }else{\n          if(handle.get) pair.get = wrapGet(handle.get);\n          if(handle.set) pair.set = wrapSet(handle.set);\n        }\n      } \n    }\n    return parsedComputed;\n  }\n})();\n"},"hash":"a4897d5cfd32d68b1360dced5a7db42e"}