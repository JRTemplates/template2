{"dependencies":[{"name":"./util.js","loc":{"line":1,"column":16}}],"generated":{"js":"var _ = require(\"./util.js\");\n\nfunction State(option){\n  this._states = {};\n  this._pending = false;\n  this.visited = false;\n  if(option) this.config(option);\n}\n\n\n//regexp cache\nState.rCache = {};\n\n_.extend( _.emitable( State ), {\n\n  getTitle: function(options){\n    var cur = this ,title;\n    while( cur ){\n      title = cur.title;\n      if(title) return typeof title === 'function'? cur.title(options): cur.title\n      cur = cur.parent;\n    }\n    return title;\n  },\n\n\n  state: function(stateName, config){\n    if(_.typeOf(stateName) === \"object\"){\n      var keys = _.values(stateName, true);\n      keys.sort(function(ka, kb){\n        return _.countDot(ka) - _.countDot(kb);\n      });\n\n      for(var i = 0, len = keys.length; i< len ;i++){\n        var key = keys[i];\n        this.state(key, stateName[key])\n      }\n      return this;\n    }\n    var current = this, next, nextName, states = this._states, i=0;\n\n    if( typeof stateName === \"string\" ) stateName = stateName.split(\".\");\n\n    var slen = stateName.length;\n    var stack = [];\n\n    do{\n      nextName = stateName[i];\n      next = states[nextName];\n      stack.push(nextName);\n      if(!next){\n        if(!config) return;\n        next = states[nextName] = new State();\n        _.extend(next, {\n          parent: current,\n          manager: current.manager || current,\n          name: stack.join(\".\"),\n          currentName: nextName\n        });\n        current.hasNext = true;\n        next.configUrl();\n      }\n      current = next;\n      states = next._states;\n    }while((++i) < slen )\n\n    if(config){\n       next.config(config);\n       return this;\n    } else {\n      return current;\n    }\n  },\n\n  config: function(configure){\n\n    configure = this._getConfig(configure);\n\n    for(var i in configure){\n      var prop = configure[i];\n      switch(i){\n        case \"url\":\n          if(typeof prop === \"string\"){\n            this.url = prop;\n            this.configUrl();\n          }\n          break;\n        case \"events\":\n          this.on(prop);\n          break;\n        default:\n          this[i] = prop;\n      }\n    }\n  },\n\n  // children override\n  _getConfig: function(configure){\n    return typeof configure === \"function\"? {enter: configure} : configure;\n  },\n\n  //from url\n  configUrl: function(){\n    var url = \"\" , base = this;\n\n    while( base ){\n\n      url = (typeof base.url === \"string\" ? base.url: (base.currentName || \"\")) + \"/\" + url;\n\n      // means absolute;\n      if(url.indexOf(\"^/\") === 0) {\n        url = url.slice(1);\n        break;\n      }\n      base = base.parent;\n    }\n    this.pattern = _.cleanPath(\"/\" + url);\n    var pathAndQuery = this.pattern.split(\"?\");\n    this.pattern = pathAndQuery[0];\n    // some Query we need watched\n\n    _.extend(this, _.normalize(this.pattern), true);\n  },\n  encode: function(param){\n\n    var state = this;\n    param = param || {};\n\n    var matched = \"%\";\n\n    var url = state.matches.replace(/\\(([\\w-]+)\\)/g, function(all, capture){\n\n      var sec = param[capture]; \n      var stype = typeof sec;\n      if(stype === 'boolean' || stype === 'number') sec = ''+sec;\n      sec = sec || '';\n      matched+= capture + \"%\";\n      return sec;\n    }) + \"?\";\n\n    // remained is the query, we need concat them after url as query\n    for(var i in param) {\n      if( matched.indexOf(\"%\"+i+\"%\") === -1) url += i + \"=\" + param[i] + \"&\";\n    }\n    return _.cleanPath( url.replace(/(?:\\?|&)$/,\"\") );\n  },\n  decode: function( path ){\n    var matched = this.regexp.exec(path),\n      keys = this.keys;\n\n    if(matched){\n\n      var param = {};\n      for(var i =0,len=keys.length;i<len;i++){\n        param[keys[i]] = matched[i+1];\n      }\n      return param;\n    }else{\n      return false;\n    }\n  },\n  // by default, all lifecycle is permitted\n\n  async: function(){\n    throw new Error( 'please use option.async instead');\n  }\n\n});\n\nmodule.exports = State;\n"},"hash":"c36c67051315881ad6f744a224c024b6"}