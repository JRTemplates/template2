{"dependencies":[{"name":"../util","loc":{"line":1,"column":16}},{"name":"../dom","loc":{"line":2,"column":19}},{"name":"../env","loc":{"line":4,"column":18}}],"generated":{"js":"var _ = require(\"../util\");\nvar dom  = require(\"../dom\");\nvar animate = {};\nvar env = require(\"../env\");\n\n\nif(typeof window !== 'undefined'){\nvar \n  transitionEnd = 'transitionend', \n  animationEnd = 'animationend', \n  transitionProperty = 'transition', \n  animationProperty = 'animation';\n\nif(!('ontransitionend' in window)){\n  if('onwebkittransitionend' in window) {\n    \n    // Chrome/Saf (+ Mobile Saf)/Android\n    transitionEnd += ' webkitTransitionEnd';\n    transitionProperty = 'webkitTransition'\n  } else if('onotransitionend' in dom.tNode || navigator.appName === 'Opera') {\n\n    // Opera\n    transitionEnd += ' oTransitionEnd';\n    transitionProperty = 'oTransition';\n  }\n}\nif(!('onanimationend' in window)){\n  if ('onwebkitanimationend' in window){\n    // Chrome/Saf (+ Mobile Saf)/Android\n    animationEnd += ' webkitAnimationEnd';\n    animationProperty = 'webkitAnimation';\n\n  }else if ('onoanimationend' in dom.tNode){\n    // Opera\n    animationEnd += ' oAnimationEnd';\n    animationProperty = 'oAnimation';\n  }\n}\n}\n\n/**\n * inject node with animation\n * @param  {[type]} node      [description]\n * @param  {[type]} refer     [description]\n * @param  {[type]} direction [description]\n * @return {[type]}           [description]\n */\nanimate.inject = function( node, refer ,direction, callback ){\n  callback = callback || _.noop;\n  if( Array.isArray(node) ){\n    var fragment = dom.fragment();\n    var count=0;\n\n    for(var i = 0,len = node.length;i < len; i++ ){\n      fragment.appendChild(node[i]); \n    }\n    dom.inject(fragment, refer, direction);\n\n    // if all nodes is done, we call the callback\n    var enterCallback = function (){\n      count++;\n      if( count === len ) callback();\n    }\n    if(len === count) callback();\n    for( i = 0; i < len; i++ ){\n      if(node[i].onenter){\n        node[i].onenter(enterCallback);\n      }else{\n        enterCallback();\n      }\n    }\n  }else{\n    if(!node) return;\n    dom.inject( node, refer, direction );\n    if(node.onenter){\n      node.onenter(callback)\n    }else{\n      callback();\n    }\n  }\n}\n\n/**\n * remove node with animation\n * @param  {[type]}   node     [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\n\nanimate.remove = function(node, callback){\n  if(!node) return;\n  var count = 0;\n  function loop(){\n    count++;\n    if(count === len) callback && callback()\n  }\n  if( Array.isArray(node) ){\n    for(var i = 0, len = node.length; i < len ; i++){\n      animate.remove(node[i], loop)\n    }\n    return;\n  }\n  if(typeof node.onleave ==='function'){\n    node.onleave(function(){\n      removeDone(node, callback)\n    })\n  }else{\n    removeDone(node, callback)\n  }\n}\n\nfunction removeDone(node, callback){\n    dom.remove(node);\n    callback && callback();\n}\n\n\n\nanimate.startClassAnimate = function ( node, className,  callback, mode ){\n  var activeClassName, timeout, tid, onceAnim;\n  if( (!animationEnd && !transitionEnd) || env.isRunning ){\n    return callback();\n  }\n\n  if(mode !== 4){\n    onceAnim = _.once(function onAnimateEnd(){\n      if(tid) clearTimeout(tid);\n\n      if(mode === 2) {\n        dom.delClass(node, activeClassName);\n      }\n      if(mode !== 3){ // mode hold the class\n        dom.delClass(node, className);\n      }\n      dom.off(node, animationEnd, onceAnim)\n      dom.off(node, transitionEnd, onceAnim)\n\n      callback();\n\n    });\n  }else{\n    onceAnim = _.once(function onAnimateEnd(){\n      if(tid) clearTimeout(tid);\n      callback();\n    });\n  }\n  if(mode === 2){ // auto removed\n    dom.addClass( node, className );\n\n    activeClassName = _.map(className.split(/\\s+/), function(name){\n       return name + '-active';\n    }).join(\" \");\n\n    dom.nextReflow(function(){\n      dom.addClass( node, activeClassName );\n      timeout = getMaxTimeout( node );\n      tid = setTimeout( onceAnim, timeout );\n    });\n\n  }else if(mode===4){\n    dom.nextReflow(function(){\n      dom.delClass( node, className );\n      timeout = getMaxTimeout( node );\n      tid = setTimeout( onceAnim, timeout );\n    });\n\n  }else{\n    dom.nextReflow(function(){\n      dom.addClass( node, className );\n      timeout = getMaxTimeout( node );\n      tid = setTimeout( onceAnim, timeout );\n    });\n  }\n\n\n\n  dom.on( node, animationEnd, onceAnim )\n  dom.on( node, transitionEnd, onceAnim )\n  return onceAnim;\n}\n\n\nanimate.startStyleAnimate = function(node, styles, callback){\n  var timeout, onceAnim, tid;\n\n  dom.nextReflow(function(){\n    dom.css( node, styles );\n    timeout = getMaxTimeout( node );\n    tid = setTimeout( onceAnim, timeout );\n  });\n\n\n  onceAnim = _.once(function onAnimateEnd(){\n    if(tid) clearTimeout(tid);\n\n    dom.off(node, animationEnd, onceAnim)\n    dom.off(node, transitionEnd, onceAnim)\n\n    callback();\n\n  });\n\n  dom.on( node, animationEnd, onceAnim )\n  dom.on( node, transitionEnd, onceAnim )\n\n  return onceAnim;\n}\n\n\n/**\n * get maxtimeout\n * @param  {Node} node \n * @return {[type]}   [description]\n */\nfunction getMaxTimeout(node){\n  var timeout = 0,\n    tDuration = 0,\n    tDelay = 0,\n    aDuration = 0,\n    aDelay = 0,\n    ratio = 5 / 3,\n    styles ;\n\n  if(window.getComputedStyle){\n\n    styles = window.getComputedStyle(node),\n    tDuration = getMaxTime( styles[transitionProperty + 'Duration']) || tDuration;\n    tDelay = getMaxTime( styles[transitionProperty + 'Delay']) || tDelay;\n    aDuration = getMaxTime( styles[animationProperty + 'Duration']) || aDuration;\n    aDelay = getMaxTime( styles[animationProperty + 'Delay']) || aDelay;\n    timeout = Math.max( tDuration+tDelay, aDuration + aDelay );\n\n  }\n  return timeout * 1000 * ratio;\n}\n\nfunction getMaxTime(str){\n\n  var maxTimeout = 0, time;\n\n  if(!str) return 0;\n\n  str.split(\",\").forEach(function(str){\n\n    time = parseFloat(str);\n    if( time > maxTimeout ) maxTimeout = time;\n\n  });\n\n  return maxTimeout;\n}\n\nmodule.exports = animate;"},"hash":"ec4e4d4d1f2c13f98c33a1d6bf543bff"}