{"dependencies":[{"name":"../util.js","loc":{"line":11,"column":16}}],"generated":{"js":"\n// (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n// Backbone may be freely distributed under the MIT license.\n// For all details and documentation:\n// http://backbonejs.org\n\n// klass: a classical JS OOP fa√ßade\n// https://github.com/ded/klass\n// License MIT (c) Dustin Diaz 2014\n  \n// inspired by backbone's extend and klass\nvar _ = require(\"../util.js\"),\n  fnTest = /xy/.test(function(){\"xy\";}) ? /\\bsupr\\b/:/.*/,\n  isFn = function(o){return typeof o === \"function\"};\n\n\nfunction wrap(k, fn, supro) {\n  return function () {\n    var tmp = this.supr;\n    this.supr = supro[k];\n    var ret = fn.apply(this, arguments);\n    this.supr = tmp;\n    return ret;\n  }\n}\n\nfunction process( what, o, supro ) {\n  for ( var k in o ) {\n    if (o.hasOwnProperty(k)) {\n\n      what[k] = isFn( o[k] ) && isFn( supro[k] ) && \n        fnTest.test( o[k] ) ? wrap(k, o[k], supro) : o[k];\n    }\n  }\n}\n\n// if the property is [\"events\", \"data\", \"computed\"] , we should merge them\nvar merged = [\"events\", \"data\", \"computed\"], mlen = merged.length;\nmodule.exports = function extend(o){\n  o = o || {};\n  var supr = this, proto,\n    supro = supr && supr.prototype || {};\n\n  if(typeof o === 'function'){\n    proto = o.prototype;\n    o.implement = implement;\n    o.extend = extend;\n    return o;\n  } \n  \n  function fn() {\n    supr.apply(this, arguments);\n  }\n\n  proto = _.createProto(fn, supro);\n\n  function implement(o){\n    // we need merge the merged property\n    var len = mlen;\n    for(;len--;){\n      var prop = merged[len];\n      if(o.hasOwnProperty(prop) && proto.hasOwnProperty(prop)){\n        _.extend(proto[prop], o[prop], true) \n        delete o[prop];\n      }\n    }\n\n\n    process(proto, o, supro); \n    return this;\n  }\n\n\n\n  fn.implement = implement\n  fn.implement(o)\n  if(supr.__after__) supr.__after__.call(fn, supr, o);\n  fn.extend = extend;\n  return fn;\n}\n\n"},"hash":"c924097ebbd56e9e54931623dd8fe2e9"}